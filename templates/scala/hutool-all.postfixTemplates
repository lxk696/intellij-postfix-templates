## Templates for hutool-all 5.7.3 liuxiongkang##

## SystemUtil

.getInt : getInt
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getInt($expr$, $arg$)

.getBoolean : getBoolean
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getBoolean($expr$, $arg$)

.get : get
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.get($expr$, $arg$)

.dumpSystemInfo : dumpSystemInfo
	java.io.PrintWriter [cn.hutool.system.SystemUtil]  →  SystemUtil.dumpSystemInfo($expr$)

.getLong : getLong
	java.lang.String [cn.hutool.system.SystemUtil]  →  SystemUtil.getLong($expr$, $arg$)


## BitStatusUtil

.remove : remove
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.remove($expr$, $arg$)

.has : has
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.has($expr$, $arg$)

.add : add
	INT [cn.hutool.core.math.BitStatusUtil]  →  BitStatusUtil.add($expr$, $arg$)


## LocalDateTimeUtil

.format : format
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.format($expr$, $arg$)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.format($expr$, $arg$)

.endOfDay : endOfDay
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.endOfDay($expr$)

.parseDate : parseDate
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.parseDate($expr$, $arg$)

.betweenPeriod : betweenPeriod
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.betweenPeriod($expr$, $arg$)

.formatNormal : formatNormal
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.formatNormal($expr$)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.formatNormal($expr$)

.ofDate : ofDate
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofDate($expr$)

.ofUTC : ofUTC
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofUTC($expr$)
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.ofUTC($expr$)

.offset : offset
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.offset($expr$, $arg$)

.beginOfDay : beginOfDay
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.beginOfDay($expr$)

.parse : parse
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.parse($expr$, $arg$)

.toEpochMilli : toEpochMilli
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.toEpochMilli($expr$)

.between : between
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.between($expr$, $arg$)

.of : of
	java.time.ZonedDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$)
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  LocalDateTimeUtil.of($expr$, $arg$)


## PemUtil

.readPemPublicKey : readPemPublicKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemPublicKey($expr$)

.readPemKey : readPemKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemKey($expr$)

.readPemObject : readPemObject
	java.io.Reader [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemObject($expr$)
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemObject($expr$)

.writePemObject : writePemObject
	java.lang.String [cn.hutool.crypto.PemUtil]  →  PemUtil.writePemObject($expr$, $arg$)
	org.bouncycastle.util.io.pem.PemObjectGenerator [cn.hutool.crypto.PemUtil]  →  PemUtil.writePemObject($expr$, $arg$)

.readSm2PemPrivateKey : readSm2PemPrivateKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readSm2PemPrivateKey($expr$)

.readPemPrivateKey : readPemPrivateKey
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPemPrivateKey($expr$)

.toPem : toPem
	java.lang.String [cn.hutool.crypto.PemUtil]  →  PemUtil.toPem($expr$, $arg$)

.readPem : readPem
	java.io.InputStream [cn.hutool.crypto.PemUtil]  →  PemUtil.readPem($expr$)


## CglibUtil

.fillBean : fillBean
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.fillBean($expr$, $arg$)

.toMap : toMap
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.toMap($expr$)

.copy : copy
	java.lang.Object [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.copy($expr$, $arg$)

.copyList : copyList
	java.util.Collection [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.copyList($expr$, $arg$)

.toBean : toBean
	java.util.Map [cn.hutool.extra.cglib.CglibUtil]  →  CglibUtil.toBean($expr$, $arg$)


## ServletUtil

.isGetMethod : isGetMethod
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isGetMethod($expr$)

.addCookie : addCookie
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.addCookie($expr$, $arg$)

.getHeader : getHeader
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeader($expr$, $arg$)

.fillBean : fillBean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.fillBean($expr$, $arg$)

.isMultipart : isMultipart
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isMultipart($expr$)

.getMultipart : getMultipart
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getMultipart($expr$, $arg$)

.getBodyBytes : getBodyBytes
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getBodyBytes($expr$)

.getHeaderMap : getHeaderMap
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeaderMap($expr$)

.getClientIP : getClientIP
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getClientIP($expr$, $arg$)

.getClientIPByHeader : getClientIPByHeader
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getClientIPByHeader($expr$, $arg$)

.isIE : isIE
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isIE($expr$)

.getHeaderIgnoreCase : getHeaderIgnoreCase
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getHeaderIgnoreCase($expr$, $arg$)

.getWriter : getWriter
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getWriter($expr$)

.getParamMap : getParamMap
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getParamMap($expr$)

.isPostMethod : isPostMethod
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.isPostMethod($expr$)

.getParams : getParams
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getParams($expr$)

.getBody : getBody
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getBody($expr$)

.toBean : toBean
	javax.servlet.ServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.toBean($expr$, $arg$)

.setHeader : setHeader
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.setHeader($expr$, $arg$)

.readCookieMap : readCookieMap
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.readCookieMap($expr$)

.write : write
	javax.servlet.http.HttpServletResponse [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.write($expr$, $arg$)

.getCookie : getCookie
	javax.servlet.http.HttpServletRequest [cn.hutool.extra.servlet.ServletUtil]  →  ServletUtil.getCookie($expr$, $arg$)


## TableUtil

.writeRow : writeRow
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  TableUtil.writeRow($expr$, $arg$)

.getOrCreateRow : getOrCreateRow
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  TableUtil.getOrCreateRow($expr$, $arg$)

.createTable : createTable
	org.apache.poi.xwpf.usermodel.XWPFDocument [cn.hutool.poi.word.TableUtil]  →  TableUtil.createTable($expr$, $arg$)

.writeTable : writeTable
	org.apache.poi.xwpf.usermodel.XWPFTable [cn.hutool.poi.word.TableUtil]  →  TableUtil.writeTable($expr$, $arg$)

.getOrCreateCell : getOrCreateCell
	org.apache.poi.xwpf.usermodel.XWPFTableRow [cn.hutool.poi.word.TableUtil]  →  TableUtil.getOrCreateCell($expr$, $arg$)


## SpliteratorUtil

.trans : trans
	java.util.Spliterator [cn.hutool.core.collection.SpliteratorUtil]  →  SpliteratorUtil.trans($expr$, $arg$)


## RuntimeUtil

.getResultLines : getResultLines
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getResultLines($expr$, $arg$)

.getResult : getResult
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getResult($expr$, $arg$)

.getErrorResult : getErrorResult
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.getErrorResult($expr$, $arg$)

.execForStr : execForStr
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForStr($expr$)
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForStr($expr$, $arg$)

.destroy : destroy
	java.lang.Process [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.destroy($expr$)

.addShutdownHook : addShutdownHook
	java.lang.Runnable [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.addShutdownHook($expr$)

.exec : exec
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.exec($expr$, $arg$)

.execForLines : execForLines
	scala.Array [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForLines($expr$)
	java.nio.charset.Charset [cn.hutool.core.util.RuntimeUtil]  →  RuntimeUtil.execForLines($expr$, $arg$)


## IdUtil

.getDataCenterId : getDataCenterId
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getDataCenterId($expr$)

.getWorkerId : getWorkerId
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getWorkerId($expr$, $arg$)

.getSnowflake : getSnowflake
	LONG [cn.hutool.core.util.IdUtil]  →  IdUtil.getSnowflake($expr$, $arg$)


## IdcardUtil

.getDayByIdCard : getDayByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getDayByIdCard($expr$)

.isValidCard : isValidCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard($expr$)

.convert15To18 : convert15To18
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.convert15To18($expr$)

.getProvinceByIdCard : getProvinceByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getProvinceByIdCard($expr$)

.getGenderByIdCard : getGenderByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getGenderByIdCard($expr$)

.getYearByIdCard : getYearByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getYearByIdCard($expr$)

.getBirthDate : getBirthDate
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirthDate($expr$)

.getBirthByIdCard : getBirthByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirthByIdCard($expr$)

.getAgeByIdCard : getAgeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getAgeByIdCard($expr$, $arg$)

.getProvinceCodeByIdCard : getProvinceCodeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getProvinceCodeByIdCard($expr$)

.isValidCard15 : isValidCard15
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard15($expr$)

.hide : hide
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.hide($expr$, $arg$)

.getBirth : getBirth
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getBirth($expr$)

.isValidCard10 : isValidCard10
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard10($expr$)

.isValidCard18 : isValidCard18
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidCard18($expr$, $arg$)

.isValidTWCard : isValidTWCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidTWCard($expr$)

.getCityCodeByIdCard : getCityCodeByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getCityCodeByIdCard($expr$)

.isValidHKCard : isValidHKCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.isValidHKCard($expr$)

.getIdcardInfo : getIdcardInfo
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getIdcardInfo($expr$)

.getMonthByIdCard : getMonthByIdCard
	java.lang.String [cn.hutool.core.util.IdcardUtil]  →  IdcardUtil.getMonthByIdCard($expr$)


## ExcelFileUtil

.isXlsx : isXlsx
	java.io.File [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXlsx($expr$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXlsx($expr$)

.isXls : isXls
	java.io.InputStream [cn.hutool.poi.excel.ExcelFileUtil]  →  ExcelFileUtil.isXls($expr$)


## JWTUtil

.createToken : createToken
	java.util.Map [cn.hutool.jwt.JWTUtil]  →  JWTUtil.createToken($expr$, $arg$)


## TemporalAccessorUtil

.format : format
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.format($expr$, $arg$)

.toEpochMilli : toEpochMilli
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toEpochMilli($expr$)

.get : get
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.get($expr$, $arg$)

.toInstant : toInstant
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.toInstant($expr$)

.between : between
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalAccessorUtil]  →  TemporalAccessorUtil.between($expr$, $arg$)


## ServiceLoaderUtil

.loadFirstAvailable : loadFirstAvailable
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadFirstAvailable($expr$)

.loadList : loadList
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadList($expr$, $arg$)

.load : load
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.load($expr$, $arg$)

.loadFirst : loadFirst
	java.lang.Class [cn.hutool.core.util.ServiceLoaderUtil]  →  ServiceLoaderUtil.loadFirst($expr$)


## ByteUtil

.shortToBytes : shortToBytes
	SHORT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.shortToBytes($expr$, $arg$)

.bytesToShort : bytesToShort
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToShort($expr$, $arg$)

.bytesToLong : bytesToLong
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToLong($expr$, $arg$)

.bytesToDouble : bytesToDouble
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToDouble($expr$, $arg$)

.intToBytes : intToBytes
	INT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.intToBytes($expr$, $arg$)

.longToBytes : longToBytes
	LONG [cn.hutool.core.util.ByteUtil]  →  ByteUtil.longToBytes($expr$, $arg$)

.doubleToBytes : doubleToBytes
	DOUBLE [cn.hutool.core.util.ByteUtil]  →  ByteUtil.doubleToBytes($expr$, $arg$)

.byteToUnsignedInt : byteToUnsignedInt
	BYTE [cn.hutool.core.util.ByteUtil]  →  ByteUtil.byteToUnsignedInt($expr$)

.numberToBytes : numberToBytes
	java.lang.Number [cn.hutool.core.util.ByteUtil]  →  ByteUtil.numberToBytes($expr$, $arg$)

.intToByte : intToByte
	INT [cn.hutool.core.util.ByteUtil]  →  ByteUtil.intToByte($expr$)

.bytesToInt : bytesToInt
	scala.Array [cn.hutool.core.util.ByteUtil]  →  ByteUtil.bytesToInt($expr$, $arg$)


## TreeUtil

.buildSingle : buildSingle
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.buildSingle($expr$, $arg$)
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.buildSingle($expr$, $arg$)

.build : build
	java.util.Map [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.build($expr$, $arg$)
	java.util.List [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.build($expr$, $arg$)

.getParentsName : getParentsName
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.getParentsName($expr$, $arg$)

.getNode : getNode
	cn.hutool.core.lang.tree.Tree [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.getNode($expr$, $arg$)

.createEmptyNode : createEmptyNode
	java.lang.Object [cn.hutool.core.lang.tree.TreeUtil]  →  TreeUtil.createEmptyNode($expr$)


## LambdaUtil

.getMethodName : getMethodName
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  LambdaUtil.getMethodName($expr$)

.resolve : resolve
	cn.hutool.core.lang.func.Func1 [cn.hutool.core.lang.func.LambdaUtil]  →  LambdaUtil.resolve($expr$)


## IterUtil

.fieldValueAsMap : fieldValueAsMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueAsMap($expr$, $arg$)

.trans : trans
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.trans($expr$, $arg$)

.size : size
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.size($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.size($expr$)

.getIter : getIter
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getIter($expr$)

.asIterator : asIterator
	java.util.Enumeration [cn.hutool.core.collection.IterUtil]  →  IterUtil.asIterator($expr$)

.join : join
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.join($expr$, $arg$)

.toMap : toMap
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.toMap($expr$, $arg$)

.asIterable : asIterable
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.asIterable($expr$)

.hasNull : hasNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.hasNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.hasNull($expr$)

.toList : toList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toList($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.toList($expr$)

.isNotEmpty : isNotEmpty
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isNotEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isNotEmpty($expr$)

.fieldValueMap : fieldValueMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueMap($expr$, $arg$)

.toListMap : toListMap
	java.util.Map [cn.hutool.core.collection.IterUtil]  →  IterUtil.toListMap($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.toListMap($expr$, $arg$)

.filter : filter
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.filter($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.filter($expr$, $arg$)

.edit : edit
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.edit($expr$, $arg$)

.countMap : countMap
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.countMap($expr$)

.getFirstNoneNull : getFirstNoneNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirstNoneNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirstNoneNull($expr$)

.isAllNull : isAllNull
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isAllNull($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isAllNull($expr$)

.isEmpty : isEmpty
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEmpty($expr$)

.isEqualList : isEqualList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.isEqualList($expr$, $arg$)

.getElementType : getElementType
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getElementType($expr$)

.getFirst : getFirst
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.getFirst($expr$)

.fieldValueList : fieldValueList
	java.lang.Iterable [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueList($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.IterUtil]  →  IterUtil.fieldValueList($expr$, $arg$)


## Ipv4Util

.longToIpv4 : longToIpv4
	LONG [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.longToIpv4($expr$)

.formatIpBlock : formatIpBlock
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.formatIpBlock($expr$, $arg$)

.getEndIpStr : getEndIpStr
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getEndIpStr($expr$, $arg$)

.countByIpRange : countByIpRange
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.countByIpRange($expr$, $arg$)

.isMaskBitValid : isMaskBitValid
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.isMaskBitValid($expr$)

.getMaskByMaskBit : getMaskByMaskBit
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskByMaskBit($expr$)

.getMaskBitByMask : getMaskBitByMask
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskBitByMask($expr$)

.getBeginIpStr : getBeginIpStr
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getBeginIpStr($expr$, $arg$)

.isMaskValid : isMaskValid
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.isMaskValid($expr$)

.countByMaskBit : countByMaskBit
	INT [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.countByMaskBit($expr$, $arg$)

.ipv4ToLong : ipv4ToLong
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.ipv4ToLong($expr$)

.list : list
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.list($expr$, $arg$)

.getMaskByIpRange : getMaskByIpRange
	java.lang.String [cn.hutool.core.net.Ipv4Util]  →  Ipv4Util.getMaskByIpRange($expr$, $arg$)


## BeanUtil

.toBeanIgnoreError : toBeanIgnoreError
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBeanIgnoreError($expr$, $arg$)

.isReadableBean : isReadableBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isReadableBean($expr$)

.getFieldValue : getFieldValue
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getFieldValue($expr$, $arg$)

.mapToBean : mapToBean
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.mapToBean($expr$, $arg$)

.isMatchName : isMatchName
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isMatchName($expr$, $arg$)

.fillBean : fillBean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBean($expr$, $arg$)

.hasGetter : hasGetter
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasGetter($expr$)

.isBean : isBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isBean($expr$)

.createDynaBean : createDynaBean
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.createDynaBean($expr$)

.getBeanDesc : getBeanDesc
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getBeanDesc($expr$)

.getPropertyDescriptors : getPropertyDescriptors
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptors($expr$)

.isNotEmpty : isNotEmpty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isNotEmpty($expr$, $arg$)

.hasNullField : hasNullField
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasNullField($expr$, $arg$)

.toBeanIgnoreCase : toBeanIgnoreCase
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBeanIgnoreCase($expr$, $arg$)

.getPropertyDescriptor : getPropertyDescriptor
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptor($expr$, $arg$)

.copyToList : copyToList
	java.util.Collection [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.copyToList($expr$, $arg$)

.descForEach : descForEach
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.descForEach($expr$, $arg$)

.hasSetter : hasSetter
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasSetter($expr$)

.getProperty : getProperty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getProperty($expr$, $arg$)

.beanToMap : beanToMap
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.beanToMap($expr$, $arg$)

.edit : edit
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.edit($expr$, $arg$)

.setProperty : setProperty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.setProperty($expr$, $arg$)

.fillBeanWithMapIgnoreCase : fillBeanWithMapIgnoreCase
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBeanWithMapIgnoreCase($expr$, $arg$)

.getPropertyDescriptorMap : getPropertyDescriptorMap
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.getPropertyDescriptorMap($expr$, $arg$)

.copyProperties : copyProperties
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.copyProperties($expr$, $arg$)

.setFieldValue : setFieldValue
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.setFieldValue($expr$, $arg$)

.toBean : toBean
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBean($expr$, $arg$)
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.toBean($expr$, $arg$)

.findEditor : findEditor
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.findEditor($expr$)

.trimStrFields : trimStrFields
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.trimStrFields($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.Object [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.isEmpty($expr$, $arg$)

.hasPublicField : hasPublicField
	java.lang.Class [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.hasPublicField($expr$)

.fillBeanWithMap : fillBeanWithMap
	java.util.Map [cn.hutool.core.bean.BeanUtil]  →  BeanUtil.fillBeanWithMap($expr$, $arg$)


## SerializeUtil

.clone : clone
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.clone($expr$)

.serialize : serialize
	java.lang.Object [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.serialize($expr$)

.deserialize : deserialize
	scala.Array [cn.hutool.core.util.SerializeUtil]  →  SerializeUtil.deserialize($expr$)


## TokenizerUtil


## MapUtil

.newIdentityMap : newIdentityMap
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newIdentityMap($expr$)

.createProxy : createProxy
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.createProxy($expr$)

.getStr : getStr
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getStr($expr$, $arg$)

.getBool : getBool
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getBool($expr$, $arg$)

.getShort : getShort
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getShort($expr$, $arg$)

.getQuietly : getQuietly
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getQuietly($expr$, $arg$)

.empty : empty
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  MapUtil.empty($expr$)

.removeNullValue : removeNullValue
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.removeNullValue($expr$)

.join : join
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.join($expr$, $arg$)

.sortJoin : sortJoin
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sortJoin($expr$, $arg$)

.clear : clear
	scala.Array [cn.hutool.core.map.MapUtil]  →  MapUtil.clear($expr$)

.defaultIfEmpty : defaultIfEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.defaultIfEmpty($expr$, $arg$)

.toMapList : toMapList
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toMapList($expr$)

.getDouble : getDouble
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getDouble($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.isNotEmpty($expr$)

.renameKey : renameKey
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.renameKey($expr$, $arg$)

.builder : builder
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.builder($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.builder($expr$, $arg$)

.getChar : getChar
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getChar($expr$, $arg$)

.getDate : getDate
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getDate($expr$, $arg$)

.inverse : inverse
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.inverse($expr$)

.reverse : reverse
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.reverse($expr$)

.toListMap : toListMap
	java.lang.Iterable [cn.hutool.core.map.MapUtil]  →  MapUtil.toListMap($expr$)

.filter : filter
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.filter($expr$, $arg$)

.edit : edit
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.edit($expr$, $arg$)

.newConcurrentHashMap : newConcurrentHashMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.newConcurrentHashMap($expr$)
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newConcurrentHashMap($expr$)

.wrap : wrap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.wrap($expr$)

.getFloat : getFloat
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getFloat($expr$, $arg$)

.emptyIfNull : emptyIfNull
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.emptyIfNull($expr$)

.getInt : getInt
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getInt($expr$, $arg$)

.sortByValue : sortByValue
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sortByValue($expr$, $arg$)

.unmodifiable : unmodifiable
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.unmodifiable($expr$)

.joinIgnoreNull : joinIgnoreNull
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.joinIgnoreNull($expr$, $arg$)

.get : get
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.get($expr$, $arg$)

.toCamelCaseMap : toCamelCaseMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toCamelCaseMap($expr$)

.sort : sort
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.sort($expr$, $arg$)

.createMap : createMap
	java.lang.Class [cn.hutool.core.map.MapUtil]  →  MapUtil.createMap($expr$)

.getAny : getAny
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getAny($expr$, $arg$)

.isEmpty : isEmpty
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.isEmpty($expr$)

.removeAny : removeAny
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.removeAny($expr$, $arg$)

.newHashMap : newHashMap
	INT [cn.hutool.core.map.MapUtil]  →  MapUtil.newHashMap($expr$, $arg$)
	BOOLEAN [cn.hutool.core.map.MapUtil]  →  MapUtil.newHashMap($expr$)

.of : of
	scala.Array [cn.hutool.core.map.MapUtil]  →  MapUtil.of($expr$)
	java.lang.Object [cn.hutool.core.map.MapUtil]  →  MapUtil.of($expr$, $arg$)

.getLong : getLong
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.getLong($expr$, $arg$)

.toObjectArray : toObjectArray
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.toObjectArray($expr$)

.newTreeMap : newTreeMap
	java.util.Map [cn.hutool.core.map.MapUtil]  →  MapUtil.newTreeMap($expr$, $arg$)
	java.util.Comparator [cn.hutool.core.map.MapUtil]  →  MapUtil.newTreeMap($expr$)


## MetaUtil

.getColumnNames : getColumnNames
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getColumnNames($expr$, $arg$)
	java.sql.ResultSet [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getColumnNames($expr$)

.getSchema : getSchema
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getSchema($expr$)

.getCataLog : getCataLog
	java.sql.Connection [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getCataLog($expr$)

.createLimitedEntity : createLimitedEntity
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.createLimitedEntity($expr$, $arg$)

.getTableMeta : getTableMeta
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getTableMeta($expr$, $arg$)

.getTables : getTables
	javax.sql.DataSource [cn.hutool.db.meta.MetaUtil]  →  MetaUtil.getTables($expr$, $arg$)


## CompareUtil

.comparingPinyin : comparingPinyin
	java.util.function.Function [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.comparingPinyin($expr$, $arg$)

.compare : compare
	java.lang.Comparable [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.compare($expr$, $arg$)
	java.lang.Object [cn.hutool.core.comparator.CompareUtil]  →  CompareUtil.compare($expr$, $arg$)


## DataSizeUtil

.parse : parse
	java.lang.String [cn.hutool.core.io.unit.DataSizeUtil]  →  DataSizeUtil.parse($expr$)

.format : format
	LONG [cn.hutool.core.io.unit.DataSizeUtil]  →  DataSizeUtil.format($expr$)


## UnicodeUtil

.toUnicode : toUnicode
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$, $arg$)
	CHAR [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$)
	INT [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toUnicode($expr$)

.toString : toString
	java.lang.String [cn.hutool.core.text.UnicodeUtil]  →  UnicodeUtil.toString($expr$)


## PrimitiveArrayUtil

.unWrap : unWrap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.unWrap($expr$)

.removeEle : removeEle
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.removeEle($expr$, $arg$)

.isSorted : isSorted
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSorted($expr$)

.isSortedASC : isSortedASC
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSortedASC($expr$)

.lastIndexOf : lastIndexOf
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.lastIndexOf($expr$, $arg$)

.addAll : addAll
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.addAll($expr$)

.isNotEmpty : isNotEmpty
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isNotEmpty($expr$)

.isSortedDESC : isSortedDESC
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isSortedDESC($expr$)

.reverse : reverse
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.reverse($expr$, $arg$)

.resize : resize
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.resize($expr$, $arg$)

.wrap : wrap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.wrap($expr$)

.remove : remove
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.remove($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.remove($expr$, $arg$)

.range : range
	INT [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.range($expr$, $arg$)

.split : split
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.split($expr$, $arg$)

.shuffle : shuffle
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.shuffle($expr$, $arg$)

.swap : swap
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.swap($expr$, $arg$)

.sub : sub
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.sub($expr$, $arg$)

.contains : contains
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.contains($expr$, $arg$)

.isEmpty : isEmpty
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.isEmpty($expr$)

.indexOf : indexOf
	scala.Array [cn.hutool.core.util.PrimitiveArrayUtil]  →  PrimitiveArrayUtil.indexOf($expr$, $arg$)


## OshiUtil

.getCpuInfo : getCpuInfo
	LONG [cn.hutool.system.oshi.OshiUtil]  →  OshiUtil.getCpuInfo($expr$)


## CharUtil

.isAsciiControl : isAsciiControl
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAsciiControl($expr$)

.isHexChar : isHexChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isHexChar($expr$)

.equals : equals
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.equals($expr$, $arg$)

.isLetterLower : isLetterLower
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterLower($expr$)

.isChar : isChar
	java.lang.Object [cn.hutool.core.util.CharUtil]  →  CharUtil.isChar($expr$)

.isLetter : isLetter
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetter($expr$)

.toCloseByNumber : toCloseByNumber
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.toCloseByNumber($expr$)

.isCharClass : isCharClass
	java.lang.Class [cn.hutool.core.util.CharUtil]  →  CharUtil.isCharClass($expr$)

.isBlankChar : isBlankChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isBlankChar($expr$)
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.isBlankChar($expr$)

.isFileSeparator : isFileSeparator
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isFileSeparator($expr$)

.digit16 : digit16
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.digit16($expr$)

.isEmoji : isEmoji
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isEmoji($expr$)

.isAsciiPrintable : isAsciiPrintable
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAsciiPrintable($expr$)

.isLetterOrNumber : isLetterOrNumber
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterOrNumber($expr$)

.toCloseChar : toCloseChar
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.toCloseChar($expr$)

.isNumber : isNumber
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isNumber($expr$)

.isLetterUpper : isLetterUpper
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isLetterUpper($expr$)

.getType : getType
	INT [cn.hutool.core.util.CharUtil]  →  CharUtil.getType($expr$)

.toString : toString
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.toString($expr$)

.isAscii : isAscii
	CHAR [cn.hutool.core.util.CharUtil]  →  CharUtil.isAscii($expr$)


## ClassUtil

.isPrimitiveWrapper : isPrimitiveWrapper
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPrimitiveWrapper($expr$)

.getDeclaredField : getDeclaredField
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredField($expr$, $arg$)

.getDeclaredMethod : getDeclaredMethod
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethod($expr$, $arg$)

.getPublicMethod : getPublicMethod
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethod($expr$, $arg$)

.getDefaultValues : getDefaultValues
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDefaultValues($expr$)

.isNotPublic : isNotPublic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNotPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNotPublic($expr$)

.getClassPath : getClassPath
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPath($expr$)

.getEnclosingClass : getEnclosingClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getEnclosingClass($expr$)

.getDefaultValue : getDefaultValue
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDefaultValue($expr$)

.scanPackageBySuper : scanPackageBySuper
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackageBySuper($expr$, $arg$)

.isBasicType : isBasicType
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isBasicType($expr$)

.equals : equals
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.equals($expr$, $arg$)

.isJdkClass : isJdkClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isJdkClass($expr$)

.scanPackageByAnnotation : scanPackageByAnnotation
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackageByAnnotation($expr$, $arg$)

.isTopLevelClass : isTopLevelClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isTopLevelClass($expr$)

.getDeclaredMethodNames : getDeclaredMethodNames
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethodNames($expr$)

.getTypeArgument : getTypeArgument
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getTypeArgument($expr$, $arg$)

.isSimpleValueType : isSimpleValueType
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isSimpleValueType($expr$)

.setAccessible : setAccessible
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.setAccessible($expr$)

.getPackagePath : getPackagePath
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPackagePath($expr$)

.getShortClassName : getShortClassName
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getShortClassName($expr$)

.getResourceUrl : getResourceUrl
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResourceUrl($expr$, $arg$)

.isEnum : isEnum
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isEnum($expr$)

.getPublicMethods : getPublicMethods
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethods($expr$, $arg$)

.getClasses : getClasses
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClasses($expr$)

.isNormalClass : isNormalClass
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isNormalClass($expr$)

.isAssignable : isAssignable
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAssignable($expr$, $arg$)

.loadClass : loadClass
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.loadClass($expr$, $arg$)

.getDeclaredMethods : getDeclaredMethods
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethods($expr$)

.isAllAssignableFrom : isAllAssignableFrom
	scala.Array [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAllAssignableFrom($expr$, $arg$)

.getPackage : getPackage
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPackage($expr$)

.isPublic : isPublic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isPublic($expr$)

.getClassName : getClassName
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassName($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassName($expr$, $arg$)

.getClassPathResources : getClassPathResources
	BOOLEAN [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPathResources($expr$)

.invoke : invoke
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.invoke($expr$, $arg$)

.getDeclaredFields : getDeclaredFields
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredFields($expr$)

.getLocation : getLocation
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getLocation($expr$)

.getClassPaths : getClassPaths
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClassPaths($expr$, $arg$)

.scanPackage : scanPackage
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.scanPackage($expr$, $arg$)

.getClass : getClass
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getClass($expr$)

.isAbstract : isAbstract
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isAbstract($expr$)

.getDeclaredMethodOfObj : getDeclaredMethodOfObj
	java.lang.Object [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getDeclaredMethodOfObj($expr$, $arg$)

.isSimpleTypeOrArray : isSimpleTypeOrArray
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isSimpleTypeOrArray($expr$)

.getPublicMethodNames : getPublicMethodNames
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getPublicMethodNames($expr$)

.getResourceURL : getResourceURL
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResourceURL($expr$)

.getResources : getResources
	java.lang.String [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getResources($expr$)

.isStatic : isStatic
	java.lang.reflect.Method [cn.hutool.core.util.ClassUtil]  →  ClassUtil.isStatic($expr$)

.getLocationPath : getLocationPath
	java.lang.Class [cn.hutool.core.util.ClassUtil]  →  ClassUtil.getLocationPath($expr$)


## FileUtil

.checksumCRC32 : checksumCRC32
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checksumCRC32($expr$)

.del : del
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.del($expr$)

.subPath : subPath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.subPath($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.subPath($expr$, $arg$)

.isDirEmpty : isDirEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirEmpty($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirEmpty($expr$)

.readString : readString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readString($expr$, $arg$)

.writeString : writeString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeString($expr$, $arg$)

.writeMap : writeMap
	java.util.Map [cn.hutool.core.io.FileUtil]  →  FileUtil.writeMap($expr$, $arg$)

.writeLines : writeLines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.writeLines($expr$, $arg$)

.lastModifiedTime : lastModifiedTime
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.lastModifiedTime($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.lastModifiedTime($expr$)

.getCanonicalPath : getCanonicalPath
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getCanonicalPath($expr$)

.move : move
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.move($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.move($expr$, $arg$)

.writeFromStream : writeFromStream
	java.io.InputStream [cn.hutool.core.io.FileUtil]  →  FileUtil.writeFromStream($expr$, $arg$)

.mainName : mainName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mainName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mainName($expr$)

.size : size
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.size($expr$)

.lastIndexOfSeparator : lastIndexOfSeparator
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.lastIndexOfSeparator($expr$)

.ls : ls
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.ls($expr$)

.exist : exist
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.exist($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.exist($expr$)

.appendString : appendString
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.appendString($expr$, $arg$)

.touch : touch
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.touch($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.touch($expr$, $arg$)

.writeUtf8Map : writeUtf8Map
	java.util.Map [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8Map($expr$, $arg$)

.isModifed : isModifed
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isModifed($expr$, $arg$)

.copyFilesFromDir : copyFilesFromDir
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFilesFromDir($expr$, $arg$)

.extName : extName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.extName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.extName($expr$)

.equals : equals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.equals($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.equals($expr$, $arg$)

.readUtf8Lines : readUtf8Lines
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8Lines($expr$, $arg$)

.normalize : normalize
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.normalize($expr$)

.getPathEle : getPathEle
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getPathEle($expr$, $arg$)

.isSymlink : isSymlink
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isSymlink($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isSymlink($expr$)

.clean : clean
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.clean($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.clean($expr$)

.mkdir : mkdir
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.mkdir($expr$)

.walkFiles : walkFiles
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.walkFiles($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.walkFiles($expr$, $arg$)

.pathEquals : pathEquals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.pathEquals($expr$, $arg$)

.writeBytes : writeBytes
	scala.Array [cn.hutool.core.io.FileUtil]  →  FileUtil.writeBytes($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isNotEmpty($expr$)

.getPrintWriter : getPrintWriter
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrintWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrintWriter($expr$, $arg$)

.newFile : newFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.newFile($expr$)

.writeUtf8String : writeUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8String($expr$, $arg$)

.load : load
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.load($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.load($expr$, $arg$)

.getParent : getParent
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getParent($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getParent($expr$, $arg$)

.isDirectory : isDirectory
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isDirectory($expr$, $arg$)

.getUtf8Reader : getUtf8Reader
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getUtf8Reader($expr$)

.getPrefix : getPrefix
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrefix($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getPrefix($expr$)

.convertCharset : convertCharset
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.convertCharset($expr$, $arg$)

.tail : tail
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.tail($expr$, $arg$)

.readLines : readLines
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readLines($expr$, $arg$)

.getName : getName
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getName($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getName($expr$)

.rename : rename
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.rename($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.rename($expr$, $arg$)

.getBOMReader : getBOMReader
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getBOMReader($expr$)

.listFileNames : listFileNames
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.listFileNames($expr$)

.mkParentDirs : mkParentDirs
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.mkParentDirs($expr$)

.createRandomAccessFile : createRandomAccessFile
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.createRandomAccessFile($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.createRandomAccessFile($expr$, $arg$)

.checkSlip : checkSlip
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checkSlip($expr$, $arg$)

.readLine : readLine
	java.io.RandomAccessFile [cn.hutool.core.io.FileUtil]  →  FileUtil.readLine($expr$, $arg$)

.copyContent : copyContent
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyContent($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copyContent($expr$, $arg$)

.getInputStream : getInputStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getInputStream($expr$)

.getLastPathEle : getLastPathEle
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getLastPathEle($expr$)

.checksum : checksum
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.checksum($expr$, $arg$)

.copyFile : copyFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copyFile($expr$, $arg$)

.newerThan : newerThan
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.newerThan($expr$, $arg$)

.getAttributes : getAttributes
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getAttributes($expr$, $arg$)

.isFile : isFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isFile($expr$, $arg$)

.convertLineSeparator : convertLineSeparator
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.convertLineSeparator($expr$, $arg$)

.isAbsolutePath : isAbsolutePath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.isAbsolutePath($expr$)

.readBytes : readBytes
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.readBytes($expr$)

.exists : exists
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.exists($expr$, $arg$)

.getWriter : getWriter
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getWriter($expr$, $arg$)

.loopFiles : loopFiles
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.loopFiles($expr$, $arg$)

.getType : getType
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getType($expr$)

.getSuffix : getSuffix
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getSuffix($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getSuffix($expr$)

.getBOMInputStream : getBOMInputStream
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getBOMInputStream($expr$)

.copy : copy
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.copy($expr$, $arg$)

.writeUtf8Lines : writeUtf8Lines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.writeUtf8Lines($expr$, $arg$)

.containsInvalid : containsInvalid
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.containsInvalid($expr$)

.file : file
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$, $arg$)
	scala.Array [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.net.URI [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.net.URL [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$)
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.file($expr$, $arg$)

.contentEquals : contentEquals
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.contentEquals($expr$, $arg$)

.appendUtf8String : appendUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.appendUtf8String($expr$, $arg$)

.getReader : getReader
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getReader($expr$, $arg$)

.createTempFile : createTempFile
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.createTempFile($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.createTempFile($expr$, $arg$)

.appendUtf8Lines : appendUtf8Lines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.appendUtf8Lines($expr$, $arg$)

.writeToStream : writeToStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.writeToStream($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.writeToStream($expr$, $arg$)

.contentEqualsIgnoreEOL : contentEqualsIgnoreEOL
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.contentEqualsIgnoreEOL($expr$, $arg$)

.isEmpty : isEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isEmpty($expr$)

.loadUtf8 : loadUtf8
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.loadUtf8($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.loadUtf8($expr$, $arg$)

.appendLines : appendLines
	java.util.Collection [cn.hutool.core.io.FileUtil]  →  FileUtil.appendLines($expr$, $arg$)

.readUtf8String : readUtf8String
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8String($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readUtf8String($expr$)

.isSub : isSub
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.isSub($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.isSub($expr$, $arg$)

.toAbsNormal : toAbsNormal
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.toAbsNormal($expr$)

.getAbsolutePath : getAbsolutePath
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getAbsolutePath($expr$, $arg$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getAbsolutePath($expr$)

.pathEndsWith : pathEndsWith
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.pathEndsWith($expr$, $arg$)

.cleanInvalid : cleanInvalid
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.cleanInvalid($expr$)

.cleanEmpty : cleanEmpty
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.cleanEmpty($expr$)

.getOutputStream : getOutputStream
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getOutputStream($expr$)

.getMimeType : getMimeType
	java.lang.String [cn.hutool.core.io.FileUtil]  →  FileUtil.getMimeType($expr$)
	java.nio.file.Path [cn.hutool.core.io.FileUtil]  →  FileUtil.getMimeType($expr$)

.readableFileSize : readableFileSize
	LONG [cn.hutool.core.io.FileUtil]  →  FileUtil.readableFileSize($expr$)
	java.io.File [cn.hutool.core.io.FileUtil]  →  FileUtil.readableFileSize($expr$)


## InternalJSONUtil


## CollectionUtil

.sortEntryToList : sortEntryToList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortEntryToList($expr$)

.fieldValueAsMap : fieldValueAsMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.fieldValueAsMap($expr$, $arg$)

.count : count
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.count($expr$, $arg$)

.trans : trans
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.trans($expr$, $arg$)

.sortByProperty : sortByProperty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByProperty($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByProperty($expr$, $arg$)

.sortPageAll : sortPageAll
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortPageAll($expr$, $arg$)

.empty : empty
	java.lang.Class [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.empty($expr$)

.reverseNew : reverseNew
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.reverseNew($expr$)

.findOneByField : findOneByField
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.findOneByField($expr$, $arg$)

.size : size
	java.lang.Object [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.size($expr$)

.union : union
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.union($expr$, $arg$)

.zip : zip
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.zip($expr$, $arg$)
	java.lang.String [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.zip($expr$, $arg$)

.filterNew : filterNew
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.filterNew($expr$, $arg$)

.asIterator : asIterator
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asIterator($expr$)

.join : join
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.join($expr$, $arg$)

.map : map
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.map($expr$, $arg$)

.subtract : subtract
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.subtract($expr$, $arg$)

.toMap : toMap
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMap($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMap($expr$, $arg$)

.intersection : intersection
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.intersection($expr$, $arg$)

.asIterable : asIterable
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asIterable($expr$)

.subtractToList : subtractToList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.subtractToList($expr$, $arg$)

.hasNull : hasNull
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.hasNull($expr$)

.getLast : getLast
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getLast($expr$)

.toList : toList
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toList($expr$)

.lastIndexOf : lastIndexOf
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.lastIndexOf($expr$, $arg$)

.clear : clear
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.clear($expr$)

.defaultIfEmpty : defaultIfEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.defaultIfEmpty($expr$, $arg$)

.indexOfAll : indexOfAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.indexOfAll($expr$, $arg$)

.toMapList : toMapList
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toMapList($expr$)

.page : page
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.page($expr$, $arg$)

.newArrayList : newArrayList
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newArrayList($expr$)

.set : set
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.set($expr$, $arg$)

.addAll : addAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.addAll($expr$, $arg$)

.sortByEntry : sortByEntry
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByEntry($expr$, $arg$)

.setOrAppend : setOrAppend
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.setOrAppend($expr$, $arg$)

.sortToMap : sortToMap
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortToMap($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isNotEmpty($expr$)

.create : create
	java.lang.Class [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.create($expr$)

.valuesOfKeys : valuesOfKeys
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.valuesOfKeys($expr$, $arg$)

.min : min
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.min($expr$)

.disjunction : disjunction
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.disjunction($expr$, $arg$)

.forEach : forEach
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.forEach($expr$, $arg$)

.newLinkedHashSet : newLinkedHashSet
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newLinkedHashSet($expr$)

.unionAll : unionAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unionAll($expr$, $arg$)

.keySet : keySet
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.keySet($expr$)

.fieldValueMap : fieldValueMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.fieldValueMap($expr$, $arg$)

.popPart : popPart
	java.util.Deque [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.popPart($expr$, $arg$)
	java.util.Stack [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.popPart($expr$, $arg$)

.reverse : reverse
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.reverse($expr$)

.toListMap : toListMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toListMap($expr$)

.unionDistinct : unionDistinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unionDistinct($expr$, $arg$)

.filter : filter
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.filter($expr$, $arg$)

.edit : edit
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.edit($expr$, $arg$)

.findOne : findOne
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.findOne($expr$, $arg$)

.removeBlank : removeBlank
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeBlank($expr$)

.removeNull : removeNull
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeNull($expr$)

.newCopyOnWriteArrayList : newCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newCopyOnWriteArrayList($expr$)

.max : max
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.max($expr$)

.countMap : countMap
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.countMap($expr$)

.emptyIfNull : emptyIfNull
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.emptyIfNull($expr$)
	java.util.Set [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.emptyIfNull($expr$)

.containsAll : containsAll
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.containsAll($expr$, $arg$)

.newBlockingQueue : newBlockingQueue
	INT [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newBlockingQueue($expr$, $arg$)

.split : split
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.split($expr$, $arg$)

.distinct : distinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.distinct($expr$)

.addAllIfNotContains : addAllIfNotContains
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.addAllIfNotContains($expr$, $arg$)

.newHashSet : newHashSet
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$)
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$)
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newHashSet($expr$, $arg$)

.unmodifiable : unmodifiable
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.unmodifiable($expr$)

.padRight : padRight
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.padRight($expr$, $arg$)

.values : values
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.values($expr$)

.toTreeSet : toTreeSet
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toTreeSet($expr$, $arg$)

.sub : sub
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sub($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sub($expr$, $arg$)

.get : get
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.get($expr$, $arg$)

.groupByField : groupByField
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.groupByField($expr$, $arg$)

.getFieldValues : getFieldValues
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFieldValues($expr$, $arg$)

.sort : sort
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)
	java.util.Map [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sort($expr$, $arg$)

.sortByPinyin : sortByPinyin
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByPinyin($expr$)
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.sortByPinyin($expr$)

.newLinkedList : newLinkedList
	scala.Array [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.newLinkedList($expr$)

.splitList : splitList
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.splitList($expr$, $arg$)

.getAny : getAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getAny($expr$, $arg$)

.contains : contains
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.contains($expr$, $arg$)

.toCollection : toCollection
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.toCollection($expr$)

.isEmpty : isEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEmpty($expr$)

.isEqualList : isEqualList
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.isEqualList($expr$, $arg$)

.getElementType : getElementType
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getElementType($expr$)

.removeAny : removeAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeAny($expr$, $arg$)

.indexOf : indexOf
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.indexOf($expr$, $arg$)

.padLeft : padLeft
	java.util.List [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.padLeft($expr$, $arg$)

.asEnumeration : asEnumeration
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.asEnumeration($expr$)

.group : group
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.group($expr$, $arg$)

.getFirst : getFirst
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.getFirst($expr$)

.containsAny : containsAny
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.containsAny($expr$, $arg$)

.list : list
	BOOLEAN [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.list($expr$, $arg$)

.extract : extract
	java.lang.Iterable [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.extract($expr$, $arg$)

.intersectionDistinct : intersectionDistinct
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.intersectionDistinct($expr$, $arg$)

.removeEmpty : removeEmpty
	java.util.Collection [cn.hutool.core.collection.CollectionUtil]  →  CollectionUtil.removeEmpty($expr$)


## NioUtil

.registerChannel : registerChannel
	java.nio.channels.Selector [cn.hutool.socket.nio.NioUtil]  →  NioUtil.registerChannel($expr$, $arg$)


## RadixUtil

.encode : encode
	java.lang.String [cn.hutool.core.util.RadixUtil]  →  RadixUtil.encode($expr$, $arg$)


## ExceptionUtil

.wrapRuntimeAndThrow : wrapRuntimeAndThrow
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntimeAndThrow($expr$)

.getRootCauseMessage : getRootCauseMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getRootCauseMessage($expr$)

.wrapRuntime : wrapRuntime
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntime($expr$)
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapRuntime($expr$)

.getSimpleMessage : getSimpleMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getSimpleMessage($expr$)

.stacktraceToString : stacktraceToString
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.stacktraceToString($expr$, $arg$)

.unwrap : unwrap
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.unwrap($expr$)

.getMessage : getMessage
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getMessage($expr$)

.wrap : wrap
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrap($expr$, $arg$)

.stacktraceToOneLineString : stacktraceToOneLineString
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.stacktraceToOneLineString($expr$, $arg$)

.isFromOrSuppressedThrowable : isFromOrSuppressedThrowable
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.isFromOrSuppressedThrowable($expr$, $arg$)

.convertFromOrSuppressedThrowable : convertFromOrSuppressedThrowable
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.convertFromOrSuppressedThrowable($expr$, $arg$)

.isCausedBy : isCausedBy
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.isCausedBy($expr$, $arg$)

.getRootCause : getRootCause
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getRootCause($expr$)

.getStackElement : getStackElement
	java.lang.String [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getStackElement($expr$, $arg$)
	INT [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getStackElement($expr$)

.getCausedBy : getCausedBy
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getCausedBy($expr$, $arg$)

.wrapAndThrow : wrapAndThrow
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.wrapAndThrow($expr$)

.getThrowableList : getThrowableList
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  ExceptionUtil.getThrowableList($expr$)


## ReUtil

.count : count
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.count($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.count($expr$, $arg$)

.getGroup0 : getGroup0
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup0($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup0($expr$, $arg$)

.getAllGroups : getAllGroups
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getAllGroups($expr$, $arg$)

.replaceFirst : replaceFirst
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.replaceFirst($expr$, $arg$)

.delLast : delLast
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delLast($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delLast($expr$, $arg$)

.lastIndexOf : lastIndexOf
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.lastIndexOf($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.lastIndexOf($expr$, $arg$)

.delPre : delPre
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delPre($expr$, $arg$)

.findAll : findAll
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAll($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAll($expr$, $arg$)

.delAll : delAll
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delAll($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delAll($expr$, $arg$)

.findAllGroup1 : findAllGroup1
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup1($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup1($expr$, $arg$)

.extractMulti : extractMulti
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMulti($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMulti($expr$, $arg$)

.isMatch : isMatch
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.isMatch($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.isMatch($expr$, $arg$)

.escape : escape
	CHAR [cn.hutool.core.util.ReUtil]  →  ReUtil.escape($expr$)
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.escape($expr$)

.getFirstNumber : getFirstNumber
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.getFirstNumber($expr$)

.extractMultiAndDelPre : extractMultiAndDelPre
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMultiAndDelPre($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.extractMultiAndDelPre($expr$, $arg$)

.findAllGroup0 : findAllGroup0
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup0($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.findAllGroup0($expr$, $arg$)

.get : get
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.get($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.get($expr$, $arg$)

.getGroup1 : getGroup1
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup1($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.getGroup1($expr$, $arg$)

.contains : contains
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.contains($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.contains($expr$, $arg$)

.replaceAll : replaceAll
	java.lang.CharSequence [cn.hutool.core.util.ReUtil]  →  ReUtil.replaceAll($expr$, $arg$)

.delFirst : delFirst
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.delFirst($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.delFirst($expr$, $arg$)

.indexOf : indexOf
	java.lang.String [cn.hutool.core.util.ReUtil]  →  ReUtil.indexOf($expr$, $arg$)
	java.util.regex.Pattern [cn.hutool.core.util.ReUtil]  →  ReUtil.indexOf($expr$, $arg$)


## StatementUtil

.prepareStatementForBatch : prepareStatementForBatch
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareStatementForBatch($expr$, $arg$)

.prepareCall : prepareCall
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareCall($expr$, $arg$)

.getGeneratedKeys : getGeneratedKeys
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  StatementUtil.getGeneratedKeys($expr$, $arg$)

.fillParams : fillParams
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.fillParams($expr$, $arg$)

.getTypeOfNull : getTypeOfNull
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.getTypeOfNull($expr$, $arg$)

.setParam : setParam
	java.sql.PreparedStatement [cn.hutool.db.StatementUtil]  →  StatementUtil.setParam($expr$, $arg$)

.getGeneratedKeyOfLong : getGeneratedKeyOfLong
	java.sql.Statement [cn.hutool.db.StatementUtil]  →  StatementUtil.getGeneratedKeyOfLong($expr$)

.prepareStatement : prepareStatement
	java.sql.Connection [cn.hutool.db.StatementUtil]  →  StatementUtil.prepareStatement($expr$, $arg$)


## WatchUtil

.register : register
	java.nio.file.Watchable [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.register($expr$, $arg$)

.createAll : createAll
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createAll($expr$, $arg$)

.createModify : createModify
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.createModify($expr$, $arg$)

.create : create
	java.io.File [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.nio.file.Path [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.net.URI [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.net.URL [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)
	java.lang.String [cn.hutool.core.io.watch.WatchUtil]  →  WatchUtil.create($expr$, $arg$)


## ReflectUtil

.getMethod : getMethod
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethod($expr$, $arg$)

.getFieldValue : getFieldValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldValue($expr$, $arg$)

.getPublicMethod : getPublicMethod
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethod($expr$, $arg$)

.getFieldsValue : getFieldsValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldsValue($expr$)

.getMethodsDirectly : getMethodsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodsDirectly($expr$, $arg$)

.isEmptyParam : isEmptyParam
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isEmptyParam($expr$)

.newInstanceIfPossible : newInstanceIfPossible
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstanceIfPossible($expr$)

.getMethodIgnoreCase : getMethodIgnoreCase
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodIgnoreCase($expr$, $arg$)

.setAccessible : setAccessible
	java.lang.reflect.AccessibleObject [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.setAccessible($expr$)

.getConstructorsDirectly : getConstructorsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructorsDirectly($expr$)

.invokeWithCheck : invokeWithCheck
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invokeWithCheck($expr$, $arg$)

.getPublicMethods : getPublicMethods
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethods($expr$, $arg$)

.getFieldMap : getFieldMap
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldMap($expr$)

.getField : getField
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getField($expr$, $arg$)

.invoke : invoke
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invoke($expr$, $arg$)

.isToStringMethod : isToStringMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isToStringMethod($expr$)

.getMethodByNameIgnoreCase : getMethodByNameIgnoreCase
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodByNameIgnoreCase($expr$, $arg$)

.hasField : hasField
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.hasField($expr$, $arg$)

.getStaticFieldValue : getStaticFieldValue
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getStaticFieldValue($expr$)

.getMethods : getMethods
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethods($expr$, $arg$)

.newInstance : newInstance
	java.lang.String [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstance($expr$)
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.newInstance($expr$, $arg$)

.getMethodOfObj : getMethodOfObj
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodOfObj($expr$, $arg$)

.isEqualsMethod : isEqualsMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isEqualsMethod($expr$)

.getFieldsDirectly : getFieldsDirectly
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldsDirectly($expr$, $arg$)

.getMethodNames : getMethodNames
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodNames($expr$)

.getMethodByName : getMethodByName
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getMethodByName($expr$, $arg$)

.getFields : getFields
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFields($expr$)

.setFieldValue : setFieldValue
	java.lang.Object [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.setFieldValue($expr$, $arg$)

.getPublicMethodNames : getPublicMethodNames
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getPublicMethodNames($expr$)

.getConstructors : getConstructors
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructors($expr$)

.invokeStatic : invokeStatic
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.invokeStatic($expr$, $arg$)

.isHashCodeMethod : isHashCodeMethod
	java.lang.reflect.Method [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.isHashCodeMethod($expr$)

.getConstructor : getConstructor
	java.lang.Class [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getConstructor($expr$, $arg$)

.getFieldName : getFieldName
	java.lang.reflect.Field [cn.hutool.core.util.ReflectUtil]  →  ReflectUtil.getFieldName($expr$)


## TemporalUtil

.between : between
	java.time.temporal.Temporal [cn.hutool.core.date.TemporalUtil]  →  TemporalUtil.between($expr$, $arg$)


## CollectorUtil

.joining : joining
	java.lang.CharSequence [cn.hutool.core.stream.CollectorUtil]  →  CollectorUtil.joining($expr$, $arg$)


## DriverUtil

.identifyDriver : identifyDriver
	java.sql.Connection [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)
	java.lang.String [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)
	javax.sql.DataSource [cn.hutool.db.dialect.DriverUtil]  →  DriverUtil.identifyDriver($expr$)


## ExcelSaxUtil

.countNullCell : countNullCell
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.countNullCell($expr$, $arg$)

.getDateValue : getDateValue
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDateValue($expr$)
	DOUBLE [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDateValue($expr$)

.readFrom : readFrom
	java.io.InputStream [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.readFrom($expr$, $arg$)

.formatCellContent : formatCellContent
	java.lang.String [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.formatCellContent($expr$, $arg$)

.createSaxReader : createSaxReader
	BOOLEAN [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.createSaxReader($expr$, $arg$)

.isDateFormat : isDateFormat
	INT [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.isDateFormat($expr$, $arg$)
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.isDateFormat($expr$, $arg$)

.getNumberOrDateValue : getNumberOrDateValue
	org.apache.poi.hssf.record.CellValueRecordInterface [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getNumberOrDateValue($expr$, $arg$)

.getDataValue : getDataValue
	cn.hutool.poi.excel.sax.CellDataType [cn.hutool.poi.excel.sax.ExcelSaxUtil]  →  ExcelSaxUtil.getDataValue($expr$, $arg$)


## ModifierUtil

.isSynthetic : isSynthetic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isSynthetic($expr$)

.isPublic : isPublic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isPublic($expr$)

.isStatic : isStatic
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.isStatic($expr$)

.hasModifier : hasModifier
	java.lang.reflect.Field [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.reflect.Constructor [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.reflect.Method [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)
	java.lang.Class [cn.hutool.core.util.ModifierUtil]  →  ModifierUtil.hasModifier($expr$, $arg$)


## HttpUtil

.getContentTypeByRequestBody : getContentTypeByRequestBody
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getContentTypeByRequestBody($expr$)

.post : post
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.post($expr$, $arg$)

.downloadFileFromUrl : downloadFileFromUrl
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadFileFromUrl($expr$, $arg$)

.getCharset : getCharset
	java.net.HttpURLConnection [cn.hutool.http.HttpUtil]  →  HttpUtil.getCharset($expr$)
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getCharset($expr$)

.normalizeParams : normalizeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.normalizeParams($expr$, $arg$)

.toParams : toParams
	java.util.Map [cn.hutool.http.HttpUtil]  →  HttpUtil.toParams($expr$, $arg$)

.getString : getString
	scala.Array [cn.hutool.http.HttpUtil]  →  HttpUtil.getString($expr$, $arg$)
	java.io.InputStream [cn.hutool.http.HttpUtil]  →  HttpUtil.getString($expr$, $arg$)

.downloadString : downloadString
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadString($expr$, $arg$)

.createServer : createServer
	INT [cn.hutool.http.HttpUtil]  →  HttpUtil.createServer($expr$)

.buildBasicAuth : buildBasicAuth
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.buildBasicAuth($expr$, $arg$)

.isHttps : isHttps
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.isHttps($expr$)

.createGet : createGet
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.createGet($expr$, $arg$)

.urlWithForm : urlWithForm
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.urlWithForm($expr$, $arg$)

.decodeParams : decodeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.decodeParams($expr$, $arg$)

.decodeParamMap : decodeParamMap
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.decodeParamMap($expr$, $arg$)

.downloadFile : downloadFile
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadFile($expr$, $arg$)

.encodeParams : encodeParams
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.encodeParams($expr$, $arg$)

.downloadBytes : downloadBytes
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.downloadBytes($expr$)

.isHttp : isHttp
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.isHttp($expr$)

.createPost : createPost
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.createPost($expr$)

.get : get
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.get($expr$, $arg$)

.createRequest : createRequest
	cn.hutool.http.Method [cn.hutool.http.HttpUtil]  →  HttpUtil.createRequest($expr$, $arg$)

.download : download
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.download($expr$, $arg$)

.getMimeType : getMimeType
	java.lang.String [cn.hutool.http.HttpUtil]  →  HttpUtil.getMimeType($expr$, $arg$)


## HashUtil

.jsHash : jsHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.jsHash($expr$)

.murmur64 : murmur64
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur64($expr$)

.javaDefaultHash : javaDefaultHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.javaDefaultHash($expr$)

.rsHash : rsHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.rsHash($expr$)

.identityHashCode : identityHashCode
	java.lang.Object [cn.hutool.core.util.HashUtil]  →  HashUtil.identityHashCode($expr$)

.sdbmHash : sdbmHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.sdbmHash($expr$)

.cityHash64 : cityHash64
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash64($expr$, $arg$)

.mixHash : mixHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.mixHash($expr$)

.elfHash : elfHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.elfHash($expr$)

.murmur32 : murmur32
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur32($expr$)

.pjwHash : pjwHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.pjwHash($expr$)

.djbHash : djbHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.djbHash($expr$)

.dekHash : dekHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.dekHash($expr$)

.cityHash32 : cityHash32
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash32($expr$)

.bernstein : bernstein
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.bernstein($expr$)

.universal : universal
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.universal($expr$, $arg$)

.fnvHash : fnvHash
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.fnvHash($expr$)
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.fnvHash($expr$)

.murmur128 : murmur128
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.murmur128($expr$)

.rotatingHash : rotatingHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.rotatingHash($expr$, $arg$)

.oneByOneHash : oneByOneHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.oneByOneHash($expr$)

.tianlHash : tianlHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.tianlHash($expr$)

.intHash : intHash
	INT [cn.hutool.core.util.HashUtil]  →  HashUtil.intHash($expr$)

.zobrist : zobrist
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.zobrist($expr$, $arg$)

.cityHash128 : cityHash128
	scala.Array [cn.hutool.core.util.HashUtil]  →  HashUtil.cityHash128($expr$, $arg$)

.bkdrHash : bkdrHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.bkdrHash($expr$)

.apHash : apHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.apHash($expr$)

.additiveHash : additiveHash
	java.lang.String [cn.hutool.core.util.HashUtil]  →  HashUtil.additiveHash($expr$, $arg$)


## URLUtil

.encode : encode
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encode($expr$, $arg$)

.encodeBlank : encodeBlank
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeBlank($expr$)

.getContentLength : getContentLength
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getContentLength($expr$)

.getURLs : getURLs
	scala.Array [cn.hutool.core.util.URLUtil]  →  URLUtil.getURLs($expr$)

.url : url
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.url($expr$, $arg$)

.normalize : normalize
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.normalize($expr$, $arg$)

.getURL : getURL
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getURL($expr$, $arg$)
	java.io.File [cn.hutool.core.util.URLUtil]  →  URLUtil.getURL($expr$)

.completeUrl : completeUrl
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.completeUrl($expr$, $arg$)

.getHost : getHost
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getHost($expr$)

.getPath : getPath
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getPath($expr$)

.buildQuery : buildQuery
	java.util.Map [cn.hutool.core.util.URLUtil]  →  URLUtil.buildQuery($expr$, $arg$)

.decode : decode
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.decode($expr$, $arg$)

.getDecodedPath : getDecodedPath
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getDecodedPath($expr$)

.toURI : toURI
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.toURI($expr$, $arg$)
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.toURI($expr$, $arg$)

.isJarFileURL : isJarFileURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isJarFileURL($expr$)

.encodeQuery : encodeQuery
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeQuery($expr$, $arg$)

.encodePathSegment : encodePathSegment
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodePathSegment($expr$, $arg$)

.getDataUri : getDataUri
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getDataUri($expr$, $arg$)

.getStringURI : getStringURI
	java.lang.CharSequence [cn.hutool.core.util.URLUtil]  →  URLUtil.getStringURI($expr$)

.getJarFile : getJarFile
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getJarFile($expr$)

.getDataUriBase64 : getDataUriBase64
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.getDataUriBase64($expr$, $arg$)

.toUrlForHttp : toUrlForHttp
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.toUrlForHttp($expr$, $arg$)

.getReader : getReader
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getReader($expr$, $arg$)

.getStream : getStream
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.getStream($expr$)

.isJarURL : isJarURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isJarURL($expr$)

.isFileURL : isFileURL
	java.net.URL [cn.hutool.core.util.URLUtil]  →  URLUtil.isFileURL($expr$)

.encodeAll : encodeAll
	java.lang.String [cn.hutool.core.util.URLUtil]  →  URLUtil.encodeAll($expr$, $arg$)


## StyleUtil

.createCellStyle : createCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createCellStyle($expr$)

.createFont : createFont
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createFont($expr$, $arg$)

.setAlign : setAlign
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setAlign($expr$, $arg$)

.isNullOrDefaultStyle : isNullOrDefaultStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.isNullOrDefaultStyle($expr$, $arg$)

.setBorder : setBorder
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setBorder($expr$, $arg$)

.cloneCellStyle : cloneCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.cloneCellStyle($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.cloneCellStyle($expr$, $arg$)

.createDefaultCellStyle : createDefaultCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createDefaultCellStyle($expr$)

.setColor : setColor
	org.apache.poi.ss.usermodel.CellStyle [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setColor($expr$, $arg$)

.setFontStyle : setFontStyle
	org.apache.poi.ss.usermodel.Font [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.setFontStyle($expr$, $arg$)

.createHeadCellStyle : createHeadCellStyle
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.style.StyleUtil]  →  StyleUtil.createHeadCellStyle($expr$)


## RobotUtil

.keyPressWithAlt : keyPressWithAlt
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithAlt($expr$)

.mouseWheel : mouseWheel
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.mouseWheel($expr$)

.captureScreen : captureScreen
	java.io.File [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.captureScreen($expr$)
	java.awt.Rectangle [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.captureScreen($expr$, $arg$)

.setDelay : setDelay
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.setDelay($expr$)

.keyPressString : keyPressString
	java.lang.String [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressString($expr$)

.keyPressWithShift : keyPressWithShift
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithShift($expr$)

.mouseMove : mouseMove
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.mouseMove($expr$, $arg$)

.keyPressWithCtrl : keyPressWithCtrl
	INT [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyPressWithCtrl($expr$)

.keyClick : keyClick
	scala.Array [cn.hutool.core.swing.RobotUtil]  →  RobotUtil.keyClick($expr$)


## ProxyUtil

.proxy : proxy
	java.lang.Object [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.proxy($expr$, $arg$)

.newProxyInstance : newProxyInstance
	java.lang.reflect.InvocationHandler [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.newProxyInstance($expr$, $arg$)
	java.lang.ClassLoader [cn.hutool.aop.ProxyUtil]  →  ProxyUtil.newProxyInstance($expr$, $arg$)


## DocUtil

.create : create
	java.io.File [cn.hutool.poi.word.DocUtil]  →  DocUtil.create($expr$)


## HexUtil

.encodeColor : encodeColor
	java.awt.Color [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeColor($expr$, $arg$)

.format : format
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.format($expr$)

.encodeHex : encodeHex
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHex($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHex($expr$, $arg$)

.decodeColor : decodeColor
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeColor($expr$)

.decodeHexStr : decodeHexStr
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHexStr($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHexStr($expr$, $arg$)

.toUnicodeHex : toUnicodeHex
	CHAR [cn.hutool.core.util.HexUtil]  →  HexUtil.toUnicodeHex($expr$)
	INT [cn.hutool.core.util.HexUtil]  →  HexUtil.toUnicodeHex($expr$)

.isHexNumber : isHexNumber
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.isHexNumber($expr$)

.decodeHex : decodeHex
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)
	java.lang.CharSequence [cn.hutool.core.util.HexUtil]  →  HexUtil.decodeHex($expr$)

.toHex : toHex
	LONG [cn.hutool.core.util.HexUtil]  →  HexUtil.toHex($expr$)
	INT [cn.hutool.core.util.HexUtil]  →  HexUtil.toHex($expr$)

.appendHex : appendHex
	java.lang.StringBuilder [cn.hutool.core.util.HexUtil]  →  HexUtil.appendHex($expr$, $arg$)

.encodeHexStr : encodeHexStr
	scala.Array [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHexStr($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.encodeHexStr($expr$, $arg$)

.toBigInteger : toBigInteger
	java.lang.String [cn.hutool.core.util.HexUtil]  →  HexUtil.toBigInteger($expr$)


## NetUtil

.longToIpv4 : longToIpv4
	LONG [cn.hutool.core.net.NetUtil]  →  NetUtil.longToIpv4($expr$)

.createAddress : createAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.createAddress($expr$, $arg$)

.isInRange : isInRange
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isInRange($expr$, $arg$)

.isUsableLocalPort : isUsableLocalPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.isUsableLocalPort($expr$)

.getNetworkInterface : getNetworkInterface
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getNetworkInterface($expr$)

.getIpByHost : getIpByHost
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getIpByHost($expr$)

.isUnknown : isUnknown
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isUnknown($expr$)

.ipv6ToBitInteger : ipv6ToBitInteger
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ipv6ToBitInteger($expr$)

.toIpList : toIpList
	java.util.Set [cn.hutool.core.net.NetUtil]  →  NetUtil.toIpList($expr$)

.isInnerIP : isInnerIP
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.isInnerIP($expr$)

.getMacAddress : getMacAddress
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.getMacAddress($expr$, $arg$)

.ping : ping
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ping($expr$, $arg$)

.idnToASCII : idnToASCII
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.idnToASCII($expr$)

.setGlobalAuthenticator : setGlobalAuthenticator
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.setGlobalAuthenticator($expr$, $arg$)
	java.net.Authenticator [cn.hutool.core.net.NetUtil]  →  NetUtil.setGlobalAuthenticator($expr$)

.bigIntegerToIPv6 : bigIntegerToIPv6
	java.math.BigInteger [cn.hutool.core.net.NetUtil]  →  NetUtil.bigIntegerToIPv6($expr$)

.parseCookies : parseCookies
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.parseCookies($expr$)

.isValidPort : isValidPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.isValidPort($expr$)

.toAbsoluteUrl : toAbsoluteUrl
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.toAbsoluteUrl($expr$, $arg$)

.getUsableLocalPort : getUsableLocalPort
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.getUsableLocalPort($expr$, $arg$)

.buildInetSocketAddress : buildInetSocketAddress
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.buildInetSocketAddress($expr$, $arg$)

.isOpen : isOpen
	java.net.InetSocketAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.isOpen($expr$, $arg$)

.getMultistageReverseProxyIp : getMultistageReverseProxyIp
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.getMultistageReverseProxyIp($expr$)

.hideIpPart : hideIpPart
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.hideIpPart($expr$)
	LONG [cn.hutool.core.net.NetUtil]  →  NetUtil.hideIpPart($expr$)

.localAddressList : localAddressList
	cn.hutool.core.lang.Filter [cn.hutool.core.net.NetUtil]  →  NetUtil.localAddressList($expr$)

.ipv4ToLong : ipv4ToLong
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.ipv4ToLong($expr$)

.getHardwareAddress : getHardwareAddress
	java.net.InetAddress [cn.hutool.core.net.NetUtil]  →  NetUtil.getHardwareAddress($expr$)

.getUsableLocalPorts : getUsableLocalPorts
	INT [cn.hutool.core.net.NetUtil]  →  NetUtil.getUsableLocalPorts($expr$, $arg$)

.netCat : netCat
	java.lang.String [cn.hutool.core.net.NetUtil]  →  NetUtil.netCat($expr$, $arg$)


## ArrayUtil

.unWrap : unWrap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.unWrap($expr$)

.hasEmpty : hasEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.hasEmpty($expr$)

.isArray : isArray
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isArray($expr$)

.newArray : newArray
	INT [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.newArray($expr$)
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.newArray($expr$, $arg$)

.zip : zip
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.zip($expr$, $arg$)

.removeEle : removeEle
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeEle($expr$, $arg$)

.isSorted : isSorted
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSorted($expr$, $arg$)

.join : join
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.join($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.join($expr$, $arg$)

.matchIndex : matchIndex
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.matchIndex($expr$, $arg$)

.insert : insert
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.insert($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.insert($expr$, $arg$)

.map : map
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.map($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.map($expr$, $arg$)

.equals : equals
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.equals($expr$, $arg$)

.hasNull : hasNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.hasNull($expr$)

.isSortedASC : isSortedASC
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSortedASC($expr$)

.lastIndexOf : lastIndexOf
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.lastIndexOf($expr$, $arg$)

.defaultIfEmpty : defaultIfEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.defaultIfEmpty($expr$, $arg$)

.addAll : addAll
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.addAll($expr$)

.indexOfIgnoreCase : indexOfIgnoreCase
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : containsIgnoreCase
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : isAllNotEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNotEmpty($expr$)

.setOrAppend : setOrAppend
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.setOrAppend($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.setOrAppend($expr$, $arg$)

.isNotEmpty : isNotEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isNotEmpty($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isNotEmpty($expr$)

.isSortedDESC : isSortedDESC
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSortedDESC($expr$)

.lastIndexOfSub : lastIndexOfSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.lastIndexOfSub($expr$, $arg$)

.firstMatch : firstMatch
	cn.hutool.core.lang.Matcher [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.firstMatch($expr$, $arg$)

.indexOfSub : indexOfSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOfSub($expr$, $arg$)

.firstNonNull : firstNonNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.firstNonNull($expr$)

.reverse : reverse
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.reverse($expr$, $arg$)

.filter : filter
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.filter($expr$, $arg$)

.resize : resize
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.resize($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.resize($expr$, $arg$)

.edit : edit
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.edit($expr$, $arg$)

.removeBlank : removeBlank
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeBlank($expr$)

.removeNull : removeNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeNull($expr$)

.wrap : wrap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.wrap($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.wrap($expr$)

.cast : cast
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.cast($expr$, $arg$)

.remove : remove
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.remove($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.remove($expr$, $arg$)

.containsAll : containsAll
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsAll($expr$, $arg$)

.range : range
	INT [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.range($expr$, $arg$)

.split : split
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.split($expr$, $arg$)

.clone : clone
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.clone($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.clone($expr$)

.distinct : distinct
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.distinct($expr$)

.isAllNull : isAllNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNull($expr$)

.toArray : toArray
	java.util.Collection [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)
	java.nio.ByteBuffer [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$)
	java.lang.Iterable [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toArray($expr$, $arg$)

.isAllNotNull : isAllNotNull
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllNotNull($expr$)

.getComponentType : getComponentType
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getComponentType($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getComponentType($expr$)

.emptyCount : emptyCount
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.emptyCount($expr$)

.shuffle : shuffle
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.shuffle($expr$, $arg$)

.swap : swap
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.swap($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.swap($expr$, $arg$)

.copy : copy
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.copy($expr$, $arg$)

.toString : toString
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.toString($expr$)

.sub : sub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.sub($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.sub($expr$, $arg$)

.length : length
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.length($expr$)

.get : get
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.get($expr$, $arg$)

.nullToEmpty : nullToEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.nullToEmpty($expr$)

.getArrayType : getArrayType
	java.lang.Class [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getArrayType($expr$)

.getAny : getAny
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.getAny($expr$, $arg$)

.contains : contains
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.contains($expr$, $arg$)

.isEmpty : isEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isEmpty($expr$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isEmpty($expr$)

.isSub : isSub
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isSub($expr$, $arg$)

.indexOf : indexOf
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.indexOf($expr$, $arg$)

.isAllEmpty : isAllEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.isAllEmpty($expr$)

.containsAny : containsAny
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.containsAny($expr$, $arg$)

.removeEmpty : removeEmpty
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.removeEmpty($expr$)

.append : append
	scala.Array [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.append($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.ArrayUtil]  →  ArrayUtil.append($expr$, $arg$)


## JAXBUtil

.beanToXml : beanToXml
	java.lang.Object [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.beanToXml($expr$, $arg$)

.xmlToBean : xmlToBean
	java.lang.String [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)
	java.io.File [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)
	java.io.Reader [cn.hutool.core.util.JAXBUtil]  →  JAXBUtil.xmlToBean($expr$, $arg$)


## ScreenUtil

.captureScreen : captureScreen
	java.io.File [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.captureScreen($expr$)
	java.awt.Rectangle [cn.hutool.core.swing.ScreenUtil]  →  ScreenUtil.captureScreen($expr$, $arg$)


## RowUtil

.writeRow : writeRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.writeRow($expr$, $arg$)

.insertRow : insertRow
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  RowUtil.insertRow($expr$, $arg$)

.getOrCreateRow : getOrCreateRow
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.RowUtil]  →  RowUtil.getOrCreateRow($expr$, $arg$)

.readRow : readRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.readRow($expr$, $arg$)

.removeRow : removeRow
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.RowUtil]  →  RowUtil.removeRow($expr$)


## MailUtil

.sendHtml : sendHtml
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendHtml($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendHtml($expr$, $arg$)

.sendText : sendText
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendText($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.sendText($expr$, $arg$)

.send : send
	java.util.Collection [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)
	java.lang.String [cn.hutool.extra.mail.MailUtil]  →  MailUtil.send($expr$, $arg$)

.getSession : getSession
	cn.hutool.extra.mail.MailAccount [cn.hutool.extra.mail.MailUtil]  →  MailUtil.getSession($expr$, $arg$)


## ZipUtil

.read : read
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.read($expr$, $arg$)
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.read($expr$, $arg$)

.zip : zip
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.util.zip.ZipOutputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)
	java.io.OutputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zip($expr$, $arg$)

.unZlib : unZlib
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unZlib($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unZlib($expr$, $arg$)

.unzip : unzip
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.util.zip.ZipInputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzip($expr$, $arg$)

.toZipFile : toZipFile
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.toZipFile($expr$, $arg$)

.listFileNames : listFileNames
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.listFileNames($expr$, $arg$)

.gzip : gzip
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.gzip($expr$, $arg$)

.unzipFileBytes : unzipFileBytes
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzipFileBytes($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unzipFileBytes($expr$, $arg$)

.unGzip : unGzip
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unGzip($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.unGzip($expr$, $arg$)

.get : get
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.get($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.get($expr$, $arg$)

.zlib : zlib
	scala.Array [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.ZipUtil]  →  ZipUtil.zlib($expr$, $arg$)

.getStream : getStream
	java.util.zip.ZipFile [cn.hutool.core.util.ZipUtil]  →  ZipUtil.getStream($expr$, $arg$)


## ClassLoaderUtil

.isPresent : isPresent
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.isPresent($expr$, $arg$)

.loadPrimitiveClass : loadPrimitiveClass
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadPrimitiveClass($expr$)

.loadClass : loadClass
	java.lang.String [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadClass($expr$, $arg$)
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.loadClass($expr$, $arg$)

.getJarClassLoader : getJarClassLoader
	java.io.File [cn.hutool.core.util.ClassLoaderUtil]  →  ClassLoaderUtil.getJarClassLoader($expr$)


## SettingUtil

.get : get
	java.lang.String [cn.hutool.setting.SettingUtil]  →  SettingUtil.get($expr$)

.getFirstFound : getFirstFound
	scala.Array [cn.hutool.setting.SettingUtil]  →  SettingUtil.getFirstFound($expr$)


## DateUtil

.parseByPatterns : parseByPatterns
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parseByPatterns($expr$, $arg$)

.endOfQuarter : endOfQuarter
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfQuarter($expr$)

.beginOfSecond : beginOfSecond
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfSecond($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfSecond($expr$)

.parseUTC : parseUTC
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parseUTC($expr$)

.dayOfYear : dayOfYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfYear($expr$)

.format : format
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  DateUtil.format($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.format($expr$, $arg$)

.endOfDay : endOfDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfDay($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfDay($expr$)

.dayOfWeekEnum : dayOfWeekEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfWeekEnum($expr$)

.parseDate : parseDate
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseDate($expr$)

.getZodiac : getZodiac
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.getZodiac($expr$, $arg$)

.ageOfNow : ageOfNow
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.ageOfNow($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.ageOfNow($expr$)

.dayOfWeek : dayOfWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfWeek($expr$)

.isSameTime : isSameTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameTime($expr$, $arg$)

.parseCST : parseCST
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseCST($expr$)

.isPM : isPM
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isPM($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isPM($expr$)

.formatBetween : formatBetween
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.formatBetween($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatBetween($expr$, $arg$)

.getEndValue : getEndValue
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.getEndValue($expr$, $arg$)

.beginOfHour : beginOfHour
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfHour($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfHour($expr$)

.nanosToMillis : nanosToMillis
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.nanosToMillis($expr$)

.parseTime : parseTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseTime($expr$)

.isAM : isAM
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isAM($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isAM($expr$)

.monthEnum : monthEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.monthEnum($expr$)

.parseLocalDateTime : parseLocalDateTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseLocalDateTime($expr$, $arg$)

.newSimpleFormat : newSimpleFormat
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.newSimpleFormat($expr$, $arg$)

.offsetWeek : offsetWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetWeek($expr$, $arg$)

.minute : minute
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.minute($expr$)

.formatTime : formatTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatTime($expr$)

.isLeapYear : isLeapYear
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.isLeapYear($expr$)

.beginOfMonth : beginOfMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMonth($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMonth($expr$)

.parseTimeToday : parseTimeToday
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseTimeToday($expr$)

.dayOfMonth : dayOfMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dayOfMonth($expr$)

.dateNew : dateNew
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.dateNew($expr$)

.formatDateTime : formatDateTime
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatDateTime($expr$)

.offsetMonth : offsetMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMonth($expr$, $arg$)

.truncate : truncate
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.truncate($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.truncate($expr$, $arg$)

.lengthOfYear : lengthOfYear
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.lengthOfYear($expr$)

.ceiling : ceiling
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.ceiling($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.ceiling($expr$, $arg$)

.offsetMinute : offsetMinute
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMinute($expr$, $arg$)

.nanosToSeconds : nanosToSeconds
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.nanosToSeconds($expr$)

.betweenWeek : betweenWeek
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenWeek($expr$, $arg$)

.formatLocalDateTime : formatLocalDateTime
	java.time.LocalDateTime [cn.hutool.core.date.DateUtil]  →  DateUtil.formatLocalDateTime($expr$)

.parseDateTime : parseDateTime
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parseDateTime($expr$)

.endOfMinute : endOfMinute
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMinute($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMinute($expr$)

.year : year
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.year($expr$)

.timeToSecond : timeToSecond
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.timeToSecond($expr$)

.getBeginValue : getBeginValue
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.getBeginValue($expr$, $arg$)

.quarter : quarter
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.quarter($expr$)

.offsetSecond : offsetSecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetSecond($expr$, $arg$)

.age : age
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.age($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.age($expr$, $arg$)

.endOfSecond : endOfSecond
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfSecond($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfSecond($expr$)

.formatHttpDate : formatHttpDate
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatHttpDate($expr$)

.betweenMs : betweenMs
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenMs($expr$, $arg$)

.weekOfMonth : weekOfMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.weekOfMonth($expr$)

.getChineseZodiac : getChineseZodiac
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.getChineseZodiac($expr$)

.hour : hour
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.hour($expr$, $arg$)

.isSameMonth : isSameMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameMonth($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameMonth($expr$, $arg$)

.calendar : calendar
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.calendar($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.calendar($expr$)

.createStopWatch : createStopWatch
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.createStopWatch($expr$)

.toLocalDateTime : toLocalDateTime
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)
	java.time.Instant [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.toLocalDateTime($expr$)

.toIntSecond : toIntSecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.toIntSecond($expr$)

.beginOfYear : beginOfYear
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfYear($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfYear($expr$)

.millisecond : millisecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.millisecond($expr$)

.second : second
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.second($expr$)

.offset : offset
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offset($expr$, $arg$)

.beginOfQuarter : beginOfQuarter
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfQuarter($expr$)

.offsetMillisecond : offsetMillisecond
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetMillisecond($expr$, $arg$)

.beginOfDay : beginOfDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfDay($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfDay($expr$)

.betweenYear : betweenYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenYear($expr$, $arg$)

.date : date
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.date($expr$)

.weekOfYear : weekOfYear
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.weekOfYear($expr$)

.offsetHour : offsetHour
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetHour($expr$, $arg$)

.parse : parse
	java.lang.String [cn.hutool.core.date.DateUtil]  →  DateUtil.parse($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.date.DateUtil]  →  DateUtil.parse($expr$, $arg$)

.isIn : isIn
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isIn($expr$, $arg$)

.range : range
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.range($expr$, $arg$)

.rangeToList : rangeToList
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.rangeToList($expr$, $arg$)

.formatDate : formatDate
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatDate($expr$)

.quarterEnum : quarterEnum
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.quarterEnum($expr$)

.isSameDay : isSameDay
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameDay($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameDay($expr$, $arg$)

.lengthOfMonth : lengthOfMonth
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.lengthOfMonth($expr$, $arg$)

.beginOfMinute : beginOfMinute
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMinute($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfMinute($expr$)

.formatChineseDate : formatChineseDate
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.formatChineseDate($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.formatChineseDate($expr$, $arg$)

.yearAndQuarter : yearAndQuarter
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$, $arg$)
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.yearAndQuarter($expr$, $arg$)

.betweenMonth : betweenMonth
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenMonth($expr$, $arg$)

.round : round
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.round($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.round($expr$, $arg$)

.betweenDay : betweenDay
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.betweenDay($expr$, $arg$)

.endOfWeek : endOfWeek
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfWeek($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfWeek($expr$, $arg$)

.endOfHour : endOfHour
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfHour($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfHour($expr$)

.spendNt : spendNt
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.spendNt($expr$)

.thisHour : thisHour
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  DateUtil.thisHour($expr$)

.toInstant : toInstant
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.toInstant($expr$)

.endOfYear : endOfYear
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfYear($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfYear($expr$)

.endOfMonth : endOfMonth
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMonth($expr$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.endOfMonth($expr$)

.between : between
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.between($expr$, $arg$)

.secondToTime : secondToTime
	INT [cn.hutool.core.date.DateUtil]  →  DateUtil.secondToTime($expr$)

.spendMs : spendMs
	LONG [cn.hutool.core.date.DateUtil]  →  DateUtil.spendMs($expr$)

.isSameInstant : isSameInstant
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.isSameInstant($expr$, $arg$)

.compare : compare
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.compare($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.compare($expr$, $arg$)

.timer : timer
	BOOLEAN [cn.hutool.core.date.DateUtil]  →  DateUtil.timer($expr$)

.beginOfWeek : beginOfWeek
	java.util.Calendar [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfWeek($expr$, $arg$)
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.beginOfWeek($expr$, $arg$)

.month : month
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.month($expr$)

.offsetDay : offsetDay
	java.util.Date [cn.hutool.core.date.DateUtil]  →  DateUtil.offsetDay($expr$, $arg$)


## ThreadUtil

.newExecutorByBlockingCoefficient : newExecutorByBlockingCoefficient
	FLOAT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newExecutorByBlockingCoefficient($expr$)

.newThread : newThread
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newThread($expr$, $arg$)

.newCompletionService : newCompletionService
	java.util.concurrent.ExecutorService [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newCompletionService($expr$)

.execute : execute
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execute($expr$)

.execAsync : execAsync
	java.util.concurrent.Callable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execAsync($expr$)
	java.lang.Runnable [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.execAsync($expr$, $arg$)

.createScheduledExecutor : createScheduledExecutor
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createScheduledExecutor($expr$)

.waitForDie : waitForDie
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.waitForDie($expr$)

.newCountDownLatch : newCountDownLatch
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newCountDownLatch($expr$)

.sleep : sleep
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sleep($expr$, $arg$)
	LONG [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sleep($expr$)

.concurrencyTest : concurrencyTest
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.concurrencyTest($expr$, $arg$)

.getStackTraceElement : getStackTraceElement
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getStackTraceElement($expr$)

.newExecutor : newExecutor
	INT [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newExecutor($expr$, $arg$)

.schedule : schedule
	java.util.concurrent.ScheduledThreadPoolExecutor [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.schedule($expr$, $arg$)

.sync : sync
	java.lang.Object [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.sync($expr$)

.safeSleep : safeSleep
	java.lang.Number [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.safeSleep($expr$)
	LONG [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.safeSleep($expr$)

.getThreads : getThreads
	java.lang.ThreadGroup [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.getThreads($expr$)

.newNamedThreadFactory : newNamedThreadFactory
	java.lang.String [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.newNamedThreadFactory($expr$, $arg$)

.interrupt : interrupt
	java.lang.Thread [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.interrupt($expr$, $arg$)

.createThreadLocal : createThreadLocal
	BOOLEAN [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createThreadLocal($expr$)
	java.util.function.Supplier [cn.hutool.core.thread.ThreadUtil]  →  ThreadUtil.createThreadLocal($expr$)


## InternalMailUtil

.parseFirstAddress : parseFirstAddress
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseFirstAddress($expr$, $arg$)

.parseAddress : parseAddress
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseAddress($expr$, $arg$)

.encodeText : encodeText
	java.lang.String [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.encodeText($expr$, $arg$)

.parseAddressFromStrs : parseAddressFromStrs
	scala.Array [cn.hutool.extra.mail.InternalMailUtil]  →  InternalMailUtil.parseAddressFromStrs($expr$, $arg$)


## DesktopUtil

.print : print
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.print($expr$)

.browse : browse
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.browse($expr$)
	java.net.URI [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.browse($expr$)

.open : open
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.open($expr$)

.edit : edit
	java.io.File [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.edit($expr$)

.mail : mail
	java.lang.String [cn.hutool.core.swing.DesktopUtil]  →  DesktopUtil.mail($expr$)


## BooleanUtil

.toInteger : toInteger
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toInteger($expr$)

.toStringTrueFalse : toStringTrueFalse
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringTrueFalse($expr$)

.toByte : toByte
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toByte($expr$)

.toShortObj : toShortObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toShortObj($expr$)

.toByteObj : toByteObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toByteObj($expr$)

.or : or
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.or($expr$)

.toFloatObj : toFloatObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toFloatObj($expr$)

.toStringOnOff : toStringOnOff
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringOnOff($expr$)

.toLongObj : toLongObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toLongObj($expr$)

.toFloat : toFloat
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toFloat($expr$)

.toCharacter : toCharacter
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toCharacter($expr$)

.toLong : toLong
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toLong($expr$)

.toStringYesNo : toStringYesNo
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toStringYesNo($expr$)

.toBoolean : toBoolean
	java.lang.String [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toBoolean($expr$)

.orOfWrap : orOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.orOfWrap($expr$)

.isBoolean : isBoolean
	java.lang.Class [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isBoolean($expr$)

.toInt : toInt
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toInt($expr$)

.negate : negate
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.negate($expr$)
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.negate($expr$)

.xor : xor
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.xor($expr$)

.toChar : toChar
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toChar($expr$)

.toDouble : toDouble
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toDouble($expr$)

.isTrue : isTrue
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isTrue($expr$)

.toString : toString
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toString($expr$, $arg$)

.xorOfWrap : xorOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.xorOfWrap($expr$)

.toShort : toShort
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toShort($expr$)

.andOfWrap : andOfWrap
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.andOfWrap($expr$)

.toDoubleObj : toDoubleObj
	BOOLEAN [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.toDoubleObj($expr$)

.and : and
	scala.Array [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.and($expr$)

.isFalse : isFalse
	java.lang.Boolean [cn.hutool.core.util.BooleanUtil]  →  BooleanUtil.isFalse($expr$)


## NioUtil

.read : read
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.read($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.read($expr$, $arg$)

.readUtf8 : readUtf8
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.readUtf8($expr$)

.copy : copy
	java.nio.channels.FileChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.copy($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.NioUtil]  →  NioUtil.copy($expr$, $arg$)

.close : close
	java.lang.AutoCloseable [cn.hutool.core.io.NioUtil]  →  NioUtil.close($expr$)

.copyByNIO : copyByNIO
	java.io.InputStream [cn.hutool.core.io.NioUtil]  →  NioUtil.copyByNIO($expr$, $arg$)


## JschUtil

.openSession : openSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openSession($expr$, $arg$)

.getSession : getSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.getSession($expr$, $arg$)

.bindRemotePort : bindRemotePort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.bindRemotePort($expr$, $arg$)

.unBindPort : unBindPort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.unBindPort($expr$, $arg$)

.createChannel : createChannel
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createChannel($expr$, $arg$)

.openAndBindPortToLocal : openAndBindPortToLocal
	cn.hutool.extra.ssh.Connector [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openAndBindPortToLocal($expr$, $arg$)

.openSftp : openSftp
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openSftp($expr$, $arg$)

.createSession : createSession
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSession($expr$, $arg$)
	com.jcraft.jsch.JSch [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSession($expr$, $arg$)

.bindPort : bindPort
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.bindPort($expr$, $arg$)

.openShell : openShell
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openShell($expr$)

.close : close
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)
	com.jcraft.jsch.Channel [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.close($expr$)

.exec : exec
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.exec($expr$, $arg$)

.execByShell : execByShell
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.execByShell($expr$, $arg$)

.createSftp : createSftp
	java.lang.String [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSftp($expr$, $arg$)
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.createSftp($expr$)

.openChannel : openChannel
	com.jcraft.jsch.Session [cn.hutool.extra.ssh.JschUtil]  →  JschUtil.openChannel($expr$, $arg$)


## CacheUtil

.newWeakCache : newWeakCache
	LONG [cn.hutool.cache.CacheUtil]  →  CacheUtil.newWeakCache($expr$)

.newLRUCache : newLRUCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newLRUCache($expr$, $arg$)

.newLFUCache : newLFUCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newLFUCache($expr$, $arg$)

.newTimedCache : newTimedCache
	LONG [cn.hutool.cache.CacheUtil]  →  CacheUtil.newTimedCache($expr$)

.newFIFOCache : newFIFOCache
	INT [cn.hutool.cache.CacheUtil]  →  CacheUtil.newFIFOCache($expr$, $arg$)


## JSONUtil

.toXmlStr : toXmlStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toXmlStr($expr$)

.createObj : createObj
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  JSONUtil.createObj($expr$)

.createArray : createArray
	cn.hutool.json.JSONConfig [cn.hutool.json.JSONUtil]  →  JSONUtil.createArray($expr$)

.isNull : isNull
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.isNull($expr$)

.toList : toList
	cn.hutool.json.JSONArray [cn.hutool.json.JSONUtil]  →  JSONUtil.toList($expr$, $arg$)
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.toList($expr$, $arg$)

.isJson : isJson
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJson($expr$)

.readJSONObject : readJSONObject
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSONObject($expr$, $arg$)

.getByPath : getByPath
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.getByPath($expr$, $arg$)

.isJsonObj : isJsonObj
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJsonObj($expr$)

.formatJsonStr : formatJsonStr
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.formatJsonStr($expr$)

.putByPath : putByPath
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.putByPath($expr$, $arg$)

.readJSONArray : readJSONArray
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSONArray($expr$, $arg$)

.toJsonPrettyStr : toJsonPrettyStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonPrettyStr($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonPrettyStr($expr$)

.xmlToJson : xmlToJson
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.xmlToJson($expr$)

.quote : quote
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.quote($expr$, $arg$)

.wrap : wrap
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.wrap($expr$, $arg$)

.escape : escape
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.escape($expr$)

.parse : parse
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parse($expr$, $arg$)

.parseObj : parseObj
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseObj($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parseObj($expr$, $arg$)

.toJsonStr : toJsonStr
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonStr($expr$, $arg$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.toJsonStr($expr$, $arg$)

.parseArray : parseArray
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseArray($expr$)
	java.lang.Object [cn.hutool.json.JSONUtil]  →  JSONUtil.parseArray($expr$, $arg$)

.readJSON : readJSON
	java.io.File [cn.hutool.json.JSONUtil]  →  JSONUtil.readJSON($expr$, $arg$)

.isJsonArray : isJsonArray
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.isJsonArray($expr$)

.toBean : toBean
	cn.hutool.json.JSON [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)
	cn.hutool.json.JSONObject [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.toBean($expr$, $arg$)

.parseFromXml : parseFromXml
	java.lang.String [cn.hutool.json.JSONUtil]  →  JSONUtil.parseFromXml($expr$)

.putSerializer : putSerializer
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  JSONUtil.putSerializer($expr$, $arg$)

.putDeserializer : putDeserializer
	java.lang.reflect.Type [cn.hutool.json.JSONUtil]  →  JSONUtil.putDeserializer($expr$, $arg$)


## FileNameUtil

.mainName : mainName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.mainName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.mainName($expr$)

.extName : extName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.extName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.extName($expr$)

.isType : isType
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.isType($expr$, $arg$)

.getPrefix : getPrefix
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getPrefix($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getPrefix($expr$)

.getName : getName
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getName($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getName($expr$)

.getSuffix : getSuffix
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getSuffix($expr$)
	java.io.File [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.getSuffix($expr$)

.containsInvalid : containsInvalid
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.containsInvalid($expr$)

.cleanInvalid : cleanInvalid
	java.lang.String [cn.hutool.core.io.file.FileNameUtil]  →  FileNameUtil.cleanInvalid($expr$)


## CsvUtil

.getWriter : getWriter
	java.lang.String [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)
	java.io.File [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)
	java.io.Writer [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getWriter($expr$, $arg$)

.getReader : getReader
	cn.hutool.core.text.csv.CsvReadConfig [cn.hutool.core.text.csv.CsvUtil]  →  CsvUtil.getReader($expr$)


## ECKeyUtil

.createOpenSSHPublicKeySpec : createOpenSSHPublicKeySpec
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.createOpenSSHPublicKeySpec($expr$)

.decodePrivateKeyParams : decodePrivateKeyParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.decodePrivateKeyParams($expr$)

.toPublicParams : toPublicParams
	org.bouncycastle.math.ec.ECPoint [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)
	java.security.PublicKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPublicParams($expr$, $arg$)

.toPrivateParams : toPrivateParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toPrivateParams($expr$)

.toSm2PublicParams : toSm2PublicParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PublicParams($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PublicParams($expr$, $arg$)

.toParams : toParams
	java.security.Key [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toParams($expr$)

.getPublicParams : getPublicParams
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.getPublicParams($expr$)

.toSm2PrivateKey : toSm2PrivateKey
	org.bouncycastle.asn1.sec.ECPrivateKey [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateKey($expr$)

.decodePublicKeyParams : decodePublicKeyParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.decodePublicKeyParams($expr$)

.toSm2PrivateParams : toSm2PrivateParams
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)
	java.lang.String [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)
	java.math.BigInteger [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.toSm2PrivateParams($expr$)

.createOpenSSHPrivateKeySpec : createOpenSSHPrivateKeySpec
	scala.Array [cn.hutool.crypto.ECKeyUtil]  →  ECKeyUtil.createOpenSSHPrivateKeySpec($expr$)


## JavaFileObjectUtil

.getJavaFileObjects : getJavaFileObjects
	java.io.File [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.getJavaFileObjects($expr$)

.isJavaFile : isJavaFile
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.isJavaFile($expr$)

.isJarOrZipFile : isJarOrZipFile
	java.lang.String [cn.hutool.core.compiler.JavaFileObjectUtil]  →  JavaFileObjectUtil.isJarOrZipFile($expr$)


## BCUtil

.toDomainParams : toDomainParams
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)
	org.bouncycastle.jce.spec.ECParameterSpec [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)
	org.bouncycastle.asn1.x9.X9ECParameters [cn.hutool.crypto.BCUtil]  →  BCUtil.toDomainParams($expr$)

.decodeECPoint : decodeECPoint
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.decodeECPoint($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.decodeECPoint($expr$, $arg$)

.readPemPublicKey : readPemPublicKey
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  BCUtil.readPemPublicKey($expr$)

.toParams : toParams
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)
	java.security.Key [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toParams($expr$, $arg$)

.encodeECPrivateKey : encodeECPrivateKey
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.encodeECPrivateKey($expr$)

.toSm2Params : toSm2Params
	scala.Array [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.BCUtil]  →  BCUtil.toSm2Params($expr$)

.encodeECPublicKey : encodeECPublicKey
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.encodeECPublicKey($expr$, $arg$)

.toPkcs1 : toPkcs1
	java.security.PublicKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toPkcs1($expr$)
	java.security.PrivateKey [cn.hutool.crypto.BCUtil]  →  BCUtil.toPkcs1($expr$)

.readPemPrivateKey : readPemPrivateKey
	java.io.InputStream [cn.hutool.crypto.BCUtil]  →  BCUtil.readPemPrivateKey($expr$)


## SocketUtil

.isConnected : isConnected
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  SocketUtil.isConnected($expr$)

.getRemoteAddress : getRemoteAddress
	java.nio.channels.AsynchronousSocketChannel [cn.hutool.socket.SocketUtil]  →  SocketUtil.getRemoteAddress($expr$)


## ExcelExtractorUtil

.getExtractor : getExtractor
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  ExcelExtractorUtil.getExtractor($expr$)

.readAsText : readAsText
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelExtractorUtil]  →  ExcelExtractorUtil.readAsText($expr$, $arg$)


## CaptchaUtil

.createLineCaptcha : createLineCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createLineCaptcha($expr$, $arg$)

.createCircleCaptcha : createCircleCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createCircleCaptcha($expr$, $arg$)

.createShearCaptcha : createShearCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createShearCaptcha($expr$, $arg$)

.createGifCaptcha : createGifCaptcha
	INT [cn.hutool.captcha.CaptchaUtil]  →  CaptchaUtil.createGifCaptcha($expr$, $arg$)


## SoapUtil

.createClient : createClient
	java.lang.String [cn.hutool.http.webservice.SoapUtil]  →  SoapUtil.createClient($expr$, $arg$)

.toString : toString
	javax.xml.soap.SOAPMessage [cn.hutool.http.webservice.SoapUtil]  →  SoapUtil.toString($expr$, $arg$)


## DbUtil

.setCaseInsensitiveGlobal : setCaseInsensitiveGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setCaseInsensitiveGlobal($expr$)

.getJndiDs : getJndiDs
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getJndiDs($expr$)

.setShowSqlGlobal : setShowSqlGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setShowSqlGlobal($expr$, $arg$)
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  DbUtil.setShowSqlGlobal($expr$)

.newSession : newSession
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.newSession($expr$)

.newSqlConnRunner : newSqlConnRunner
	java.sql.Connection [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)
	cn.hutool.db.dialect.Dialect [cn.hutool.db.DbUtil]  →  DbUtil.newSqlConnRunner($expr$)

.setReturnGeneratedKeyGlobal : setReturnGeneratedKeyGlobal
	BOOLEAN [cn.hutool.db.DbUtil]  →  DbUtil.setReturnGeneratedKeyGlobal($expr$)

.use : use
	javax.sql.DataSource [cn.hutool.db.DbUtil]  →  DbUtil.use($expr$, $arg$)

.removeShowSqlParams : removeShowSqlParams
	cn.hutool.setting.Setting [cn.hutool.db.DbUtil]  →  DbUtil.removeShowSqlParams($expr$)

.close : close
	scala.Array [cn.hutool.db.DbUtil]  →  DbUtil.close($expr$)

.getDs : getDs
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getDs($expr$)

.getJndiDsWithLog : getJndiDsWithLog
	java.lang.String [cn.hutool.db.DbUtil]  →  DbUtil.getJndiDsWithLog($expr$)


## CellUtil

.setComment : setComment
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.setComment($expr$, $arg$)

.setCellValue : setCellValue
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.setCellValue($expr$, $arg$)

.getMergedRegionValue : getMergedRegionValue
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionValue($expr$, $arg$)

.getCellValue : getCellValue
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getCellValue($expr$, $arg$)

.getCell : getCell
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getCell($expr$, $arg$)

.isMergedRegion : isMergedRegion
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.isMergedRegion($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.isMergedRegion($expr$)

.getMergedRegionCell : getMergedRegionCell
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionCell($expr$, $arg$)
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getMergedRegionCell($expr$)

.mergingCells : mergingCells
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.mergingCells($expr$, $arg$)

.getOrCreateCell : getOrCreateCell
	org.apache.poi.ss.usermodel.Row [cn.hutool.poi.excel.cell.CellUtil]  →  CellUtil.getOrCreateCell($expr$, $arg$)


## RandomUtil

.randomEleList : randomEleList
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEleList($expr$, $arg$)

.randomDouble : randomDouble
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDouble($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDouble($expr$, $arg$)

.randomStringWithoutStr : randomStringWithoutStr
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomStringWithoutStr($expr$, $arg$)

.randomNumbers : randomNumbers
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomNumbers($expr$)

.randomEleSet : randomEleSet
	java.util.Collection [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEleSet($expr$, $arg$)

.randomString : randomString
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomString($expr$, $arg$)
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomString($expr$)

.getSecureRandom : getSecureRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSecureRandom($expr$)

.randomEle : randomEle
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEle($expr$, $arg$)
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEle($expr$, $arg$)

.createSecureRandom : createSecureRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.createSecureRandom($expr$)

.randomDate : randomDate
	java.util.Date [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDate($expr$, $arg$)

.randomBytes : randomBytes
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBytes($expr$)

.randomStringUpper : randomStringUpper
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomStringUpper($expr$)

.weightRandom : weightRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.weightRandom($expr$)
	java.lang.Iterable [cn.hutool.core.util.RandomUtil]  →  RandomUtil.weightRandom($expr$)

.getRandom : getRandom
	BOOLEAN [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getRandom($expr$)

.randomChar : randomChar
	java.lang.String [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomChar($expr$)

.randomEles : randomEles
	java.util.List [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomEles($expr$, $arg$)

.getSHA1PRNGRandom : getSHA1PRNGRandom
	scala.Array [cn.hutool.core.util.RandomUtil]  →  RandomUtil.getSHA1PRNGRandom($expr$)

.randomDay : randomDay
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomDay($expr$, $arg$)

.randomLong : randomLong
	LONG [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomLong($expr$, $arg$)

.randomInt : randomInt
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomInt($expr$, $arg$)

.randomInts : randomInts
	INT [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomInts($expr$)

.randomBigDecimal : randomBigDecimal
	java.math.BigDecimal [cn.hutool.core.util.RandomUtil]  →  RandomUtil.randomBigDecimal($expr$, $arg$)


## ClipboardUtil

.getStr : getStr
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getStr($expr$)

.set : set
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.set($expr$, $arg$)

.getImage : getImage
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.getImage($expr$)

.setStr : setStr
	java.lang.String [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.setStr($expr$)

.listen : listen
	INT [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.listen($expr$, $arg$)
	cn.hutool.core.swing.clipboard.ClipboardListener [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.listen($expr$, $arg$)

.get : get
	java.awt.datatransfer.Transferable [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.get($expr$, $arg$)
	java.awt.datatransfer.DataFlavor [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.get($expr$)

.setImage : setImage
	java.awt.Image [cn.hutool.core.swing.clipboard.ClipboardUtil]  →  ClipboardUtil.setImage($expr$)


## ImgUtil

.copyImage : copyImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.copyImage($expr$, $arg$)

.read : read
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	cn.hutool.core.io.resource.Resource [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.read($expr$)

.createImage : createImage
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createImage($expr$, $arg$)

.getColor : getColor
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getColor($expr$)
	INT [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getColor($expr$)

.createFont : createFont
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createFont($expr$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createFont($expr$)

.binary : binary
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.binary($expr$, $arg$)

.hexToColor : hexToColor
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.hexToColor($expr$)

.writePng : writePng
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.writePng($expr$, $arg$)

.getRectangle : getRectangle
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getRectangle($expr$, $arg$)

.scale : scale
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.scale($expr$, $arg$)

.cut : cut
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.cut($expr$, $arg$)

.getImageInputStream : getImageInputStream
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageInputStream($expr$)

.getImage : getImage
	java.net.URL [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImage($expr$)

.toImage : toImage
	scala.Array [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toImage($expr$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toImage($expr$)

.toBase64DataUri : toBase64DataUri
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBase64DataUri($expr$, $arg$)

.createGraphics : createGraphics
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.createGraphics($expr$, $arg$)

.toRenderedImage : toRenderedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toRenderedImage($expr$)

.rotate : rotate
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.rotate($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.rotate($expr$, $arg$)

.getImageOutputStream : getImageOutputStream
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageOutputStream($expr$)
	java.io.OutputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getImageOutputStream($expr$)

.toStream : toStream
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toStream($expr$, $arg$)

.backgroundRemoval : backgroundRemoval
	java.io.ByteArrayOutputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.backgroundRemoval($expr$, $arg$)

.gray : gray
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.gray($expr$, $arg$)

.flip : flip
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.flip($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.flip($expr$, $arg$)

.toBytes : toBytes
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBytes($expr$, $arg$)

.slice : slice
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.slice($expr$, $arg$)
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.slice($expr$, $arg$)

.toBase64 : toBase64
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBase64($expr$, $arg$)

.compress : compress
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.compress($expr$, $arg$)

.toBufferedImage : toBufferedImage
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toBufferedImage($expr$, $arg$)

.getWriter : getWriter
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getWriter($expr$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getWriter($expr$, $arg$)

.pressImage : pressImage
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressImage($expr$, $arg$)

.pressText : pressText
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.pressText($expr$, $arg$)

.sliceByRowsAndCols : sliceByRowsAndCols
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.sliceByRowsAndCols($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.sliceByRowsAndCols($expr$, $arg$)

.randomColor : randomColor
	java.util.Random [cn.hutool.core.img.ImgUtil]  →  ImgUtil.randomColor($expr$)

.getReader : getReader
	java.lang.String [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getReader($expr$)

.writeJpg : writeJpg
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.writeJpg($expr$, $arg$)

.toHex : toHex
	java.awt.Color [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toHex($expr$)
	INT [cn.hutool.core.img.ImgUtil]  →  ImgUtil.toHex($expr$, $arg$)

.getPointBaseCentre : getPointBaseCentre
	java.awt.Rectangle [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getPointBaseCentre($expr$, $arg$)

.getMainColor : getMainColor
	java.awt.image.BufferedImage [cn.hutool.core.img.ImgUtil]  →  ImgUtil.getMainColor($expr$, $arg$)

.convert : convert
	java.io.File [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.convert($expr$, $arg$)

.write : write
	java.awt.Image [cn.hutool.core.img.ImgUtil]  →  ImgUtil.write($expr$, $arg$)
	javax.imageio.stream.ImageInputStream [cn.hutool.core.img.ImgUtil]  →  ImgUtil.write($expr$, $arg$)


## BufferUtil

.readStr : readStr
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readStr($expr$, $arg$)

.create : create
	scala.Array [cn.hutool.core.io.BufferUtil]  →  BufferUtil.create($expr$)
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  BufferUtil.create($expr$, $arg$)

.lineEnd : lineEnd
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.lineEnd($expr$, $arg$)

.readLine : readLine
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readLine($expr$, $arg$)

.readBytes : readBytes
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readBytes($expr$, $arg$)

.readUtf8Str : readUtf8Str
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.readUtf8Str($expr$)

.createCharBuffer : createCharBuffer
	INT [cn.hutool.core.io.BufferUtil]  →  BufferUtil.createCharBuffer($expr$)

.copy : copy
	java.nio.ByteBuffer [cn.hutool.core.io.BufferUtil]  →  BufferUtil.copy($expr$, $arg$)

.createUtf8 : createUtf8
	java.lang.CharSequence [cn.hutool.core.io.BufferUtil]  →  BufferUtil.createUtf8($expr$)


## AlgorithmUtil

.getId : getId
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  AlgorithmUtil.getId($expr$)

.getAlgorithm : getAlgorithm
	java.lang.String [cn.hutool.jwt.signers.AlgorithmUtil]  →  AlgorithmUtil.getAlgorithm($expr$)


## StreamUtil

.of : of
	java.io.File [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	scala.Array [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$)
	java.nio.file.Path [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)
	java.lang.Object [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.of($expr$, $arg$)

.join : join
	java.util.stream.Stream [cn.hutool.core.stream.StreamUtil]  →  StreamUtil.join($expr$, $arg$)


## CompressUtil

.createArchiver : createArchiver
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.createArchiver($expr$, $arg$)

.createExtractor : createExtractor
	java.nio.charset.Charset [cn.hutool.extra.compress.CompressUtil]  →  CompressUtil.createExtractor($expr$, $arg$)


## CollStreamUtil

.toSet : toSet
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toSet($expr$, $arg$)

.toMap : toMap
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toMap($expr$, $arg$)

.toList : toList
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toList($expr$, $arg$)

.groupBy2Key : groupBy2Key
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupBy2Key($expr$, $arg$)

.group2Map : group2Map
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.group2Map($expr$, $arg$)

.groupByKey : groupByKey
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.groupByKey($expr$, $arg$)

.merge : merge
	java.util.Map [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.merge($expr$, $arg$)

.toIdentityMap : toIdentityMap
	java.util.Collection [cn.hutool.core.collection.CollStreamUtil]  →  CollStreamUtil.toIdentityMap($expr$, $arg$)


## EnableSpringUtil


## CollUtil

.sortEntryToList : sortEntryToList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortEntryToList($expr$)

.fieldValueAsMap : fieldValueAsMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.fieldValueAsMap($expr$, $arg$)

.count : count
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.count($expr$, $arg$)

.trans : trans
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.trans($expr$, $arg$)

.sortByProperty : sortByProperty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByProperty($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByProperty($expr$, $arg$)

.sortPageAll : sortPageAll
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortPageAll($expr$, $arg$)

.empty : empty
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  CollUtil.empty($expr$)

.reverseNew : reverseNew
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.reverseNew($expr$)

.findOneByField : findOneByField
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.findOneByField($expr$, $arg$)

.size : size
	java.lang.Object [cn.hutool.core.collection.CollUtil]  →  CollUtil.size($expr$)

.union : union
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.union($expr$, $arg$)

.zip : zip
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.zip($expr$, $arg$)
	java.lang.String [cn.hutool.core.collection.CollUtil]  →  CollUtil.zip($expr$, $arg$)

.filterNew : filterNew
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.filterNew($expr$, $arg$)

.asIterator : asIterator
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.asIterator($expr$)

.join : join
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.join($expr$, $arg$)

.map : map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.map($expr$, $arg$)

.subtract : subtract
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.subtract($expr$, $arg$)

.toMap : toMap
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMap($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMap($expr$, $arg$)

.intersection : intersection
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.intersection($expr$, $arg$)

.asIterable : asIterable
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.asIterable($expr$)

.subtractToList : subtractToList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.subtractToList($expr$, $arg$)

.hasNull : hasNull
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.hasNull($expr$)

.getLast : getLast
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.getLast($expr$)

.toList : toList
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.toList($expr$)

.lastIndexOf : lastIndexOf
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.lastIndexOf($expr$, $arg$)

.clear : clear
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.clear($expr$)

.defaultIfEmpty : defaultIfEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.defaultIfEmpty($expr$, $arg$)

.indexOfAll : indexOfAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.indexOfAll($expr$, $arg$)

.toMapList : toMapList
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.toMapList($expr$)

.page : page
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.page($expr$, $arg$)

.newArrayList : newArrayList
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newArrayList($expr$)

.set : set
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.set($expr$, $arg$)

.addAll : addAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.addAll($expr$, $arg$)

.sortByEntry : sortByEntry
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByEntry($expr$, $arg$)

.setOrAppend : setOrAppend
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.setOrAppend($expr$, $arg$)

.sortToMap : sortToMap
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortToMap($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.isNotEmpty($expr$)

.create : create
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  CollUtil.create($expr$)

.valuesOfKeys : valuesOfKeys
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.valuesOfKeys($expr$, $arg$)

.min : min
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.min($expr$)

.disjunction : disjunction
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.disjunction($expr$, $arg$)

.forEach : forEach
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.forEach($expr$, $arg$)

.newLinkedHashSet : newLinkedHashSet
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newLinkedHashSet($expr$)

.unionAll : unionAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unionAll($expr$, $arg$)

.keySet : keySet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.keySet($expr$)

.fieldValueMap : fieldValueMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.fieldValueMap($expr$, $arg$)

.popPart : popPart
	java.util.Deque [cn.hutool.core.collection.CollUtil]  →  CollUtil.popPart($expr$, $arg$)
	java.util.Stack [cn.hutool.core.collection.CollUtil]  →  CollUtil.popPart($expr$, $arg$)

.reverse : reverse
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.reverse($expr$)

.toListMap : toListMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toListMap($expr$)

.unionDistinct : unionDistinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unionDistinct($expr$, $arg$)

.filter : filter
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.filter($expr$, $arg$)

.edit : edit
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.edit($expr$, $arg$)

.findOne : findOne
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.findOne($expr$, $arg$)

.removeBlank : removeBlank
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeBlank($expr$)

.removeNull : removeNull
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeNull($expr$)

.newCopyOnWriteArrayList : newCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newCopyOnWriteArrayList($expr$)

.max : max
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.max($expr$)

.countMap : countMap
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.countMap($expr$)

.emptyIfNull : emptyIfNull
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.emptyIfNull($expr$)
	java.util.Set [cn.hutool.core.collection.CollUtil]  →  CollUtil.emptyIfNull($expr$)

.containsAll : containsAll
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.containsAll($expr$, $arg$)

.newBlockingQueue : newBlockingQueue
	INT [cn.hutool.core.collection.CollUtil]  →  CollUtil.newBlockingQueue($expr$, $arg$)

.split : split
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.split($expr$, $arg$)

.distinct : distinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.distinct($expr$)

.addAllIfNotContains : addAllIfNotContains
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.addAllIfNotContains($expr$, $arg$)

.newHashSet : newHashSet
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$)
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.newHashSet($expr$, $arg$)

.unmodifiable : unmodifiable
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.unmodifiable($expr$)

.padRight : padRight
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.padRight($expr$, $arg$)

.values : values
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.values($expr$)

.toTreeSet : toTreeSet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.toTreeSet($expr$, $arg$)

.sub : sub
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sub($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sub($expr$, $arg$)

.get : get
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.get($expr$, $arg$)

.groupByField : groupByField
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.groupByField($expr$, $arg$)

.getFieldValues : getFieldValues
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFieldValues($expr$, $arg$)

.sort : sort
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  CollUtil.sort($expr$, $arg$)

.sortByPinyin : sortByPinyin
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByPinyin($expr$)
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.sortByPinyin($expr$)

.newLinkedList : newLinkedList
	scala.Array [cn.hutool.core.collection.CollUtil]  →  CollUtil.newLinkedList($expr$)

.splitList : splitList
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.splitList($expr$, $arg$)

.getAny : getAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.getAny($expr$, $arg$)

.contains : contains
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.contains($expr$, $arg$)

.toCollection : toCollection
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.toCollection($expr$)

.isEmpty : isEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEmpty($expr$)

.isEqualList : isEqualList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.isEqualList($expr$, $arg$)

.getElementType : getElementType
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getElementType($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.getElementType($expr$)

.removeAny : removeAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeAny($expr$, $arg$)

.indexOf : indexOf
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.indexOf($expr$, $arg$)

.padLeft : padLeft
	java.util.List [cn.hutool.core.collection.CollUtil]  →  CollUtil.padLeft($expr$, $arg$)

.asEnumeration : asEnumeration
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.asEnumeration($expr$)

.group : group
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.group($expr$, $arg$)

.getFirst : getFirst
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFirst($expr$)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  CollUtil.getFirst($expr$)

.containsAny : containsAny
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.containsAny($expr$, $arg$)

.list : list
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  CollUtil.list($expr$, $arg$)

.extract : extract
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  CollUtil.extract($expr$, $arg$)

.intersectionDistinct : intersectionDistinct
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.intersectionDistinct($expr$, $arg$)

.removeEmpty : removeEmpty
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  CollUtil.removeEmpty($expr$)


## DigestUtil

.sha1 : sha1
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1($expr$)

.bcryptCheck : bcryptCheck
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.bcryptCheck($expr$, $arg$)

.digester : digester
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.digester($expr$)
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.digester($expr$)

.sha1Hex : sha1Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha1Hex($expr$)

.hmac : hmac
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.hmac($expr$, $arg$)

.md5Hex16 : md5Hex16
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex16($expr$)

.sha256 : sha256
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256($expr$)

.sha256Hex : sha256Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.sha256Hex($expr$)

.md5 : md5
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5($expr$)

.bcrypt : bcrypt
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.bcrypt($expr$)

.md5HexTo16 : md5HexTo16
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5HexTo16($expr$)

.md5Hex : md5Hex
	scala.Array [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)
	java.lang.String [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$, $arg$)
	java.io.File [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)
	java.io.InputStream [cn.hutool.crypto.digest.DigestUtil]  →  DigestUtil.md5Hex($expr$)


## GanymedUtil

.openSession : openSession
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.openSession($expr$, $arg$)

.connect : connect
	java.lang.String [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.connect($expr$, $arg$)

.close : close
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.close($expr$)

.exec : exec
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.exec($expr$, $arg$)

.execByShell : execByShell
	ch.ethz.ssh2.Session [cn.hutool.extra.ssh.GanymedUtil]  →  GanymedUtil.execByShell($expr$, $arg$)


## PhoneUtil

.isMobile : isMobile
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobile($expr$)

.isMobileMo : isMobileMo
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileMo($expr$)

.isTel400800 : isTel400800
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isTel400800($expr$)

.hideAfter : hideAfter
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideAfter($expr$)

.subAfter : subAfter
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subAfter($expr$)

.hideBetween : hideBetween
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideBetween($expr$)

.isMobileTw : isMobileTw
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileTw($expr$)

.hideBefore : hideBefore
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.hideBefore($expr$)

.subBefore : subBefore
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subBefore($expr$)

.subBetween : subBetween
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.subBetween($expr$)

.isPhone : isPhone
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isPhone($expr$)

.isMobileHk : isMobileHk
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isMobileHk($expr$)

.isTel : isTel
	java.lang.CharSequence [cn.hutool.core.util.PhoneUtil]  →  PhoneUtil.isTel($expr$)


## SensitiveUtil

.setCharFilter : setCharFilter
	cn.hutool.core.lang.Filter [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.setCharFilter($expr$)

.getFoundFirstSensitive : getFoundFirstSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundFirstSensitive($expr$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundFirstSensitive($expr$)

.containsSensitive : containsSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.containsSensitive($expr$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.containsSensitive($expr$)

.getFoundAllSensitive : getFoundAllSensitive
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundAllSensitive($expr$, $arg$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.getFoundAllSensitive($expr$, $arg$)

.sensitiveFilter : sensitiveFilter
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.sensitiveFilter($expr$, $arg$)
	java.lang.Object [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.sensitiveFilter($expr$, $arg$)

.init : init
	java.util.Collection [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.init($expr$, $arg$)
	java.lang.String [cn.hutool.dfa.SensitiveUtil]  →  SensitiveUtil.init($expr$, $arg$)


## EscapeUtil

.unescapeXml : unescapeXml
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescapeXml($expr$)

.escapeHtml4 : escapeHtml4
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeHtml4($expr$)

.escapeXml : escapeXml
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeXml($expr$)

.safeUnescape : safeUnescape
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.safeUnescape($expr$)

.escape : escape
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escape($expr$, $arg$)

.escapeAll : escapeAll
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.escapeAll($expr$)

.unescapeHtml4 : unescapeHtml4
	java.lang.CharSequence [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescapeHtml4($expr$)

.unescape : unescape
	java.lang.String [cn.hutool.core.util.EscapeUtil]  →  EscapeUtil.unescape($expr$)


## CallerUtil

.getCaller : getCaller
	INT [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCaller($expr$)

.getCallerMethodName : getCallerMethodName
	BOOLEAN [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.getCallerMethodName($expr$)

.isCalledBy : isCalledBy
	java.lang.Class [cn.hutool.core.lang.caller.CallerUtil]  →  CallerUtil.isCalledBy($expr$)


## WorkbookUtil

.createBookForWriter : createBookForWriter
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBookForWriter($expr$)

.writeBook : writeBook
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.writeBook($expr$, $arg$)

.createBook : createBook
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$)
	BOOLEAN [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$)
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createBook($expr$, $arg$)

.createSXSSFBook : createSXSSFBook
	java.lang.String [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$)
	INT [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$)
	java.io.File [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.createSXSSFBook($expr$, $arg$)

.isEmpty : isEmpty
	org.apache.poi.ss.usermodel.Sheet [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.isEmpty($expr$)

.getOrCreateSheet : getOrCreateSheet
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.WorkbookUtil]  →  WorkbookUtil.getOrCreateSheet($expr$, $arg$)


## SqlUtil

.toSqlTimestamp : toSqlTimestamp
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.toSqlTimestamp($expr$)

.blobToStr : blobToStr
	java.sql.Blob [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.blobToStr($expr$, $arg$)

.createBlob : createBlob
	java.sql.Connection [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.createBlob($expr$, $arg$)

.buildEqualsWhere : buildEqualsWhere
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildEqualsWhere($expr$, $arg$)

.buildConditions : buildConditions
	cn.hutool.db.Entity [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildConditions($expr$)

.formatSql : formatSql
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.formatSql($expr$)

.clobToStr : clobToStr
	java.sql.Clob [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.clobToStr($expr$)

.rowIdToString : rowIdToString
	java.sql.RowId [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.rowIdToString($expr$)

.toSqlDate : toSqlDate
	java.util.Date [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.toSqlDate($expr$)

.buildLikeValue : buildLikeValue
	java.lang.String [cn.hutool.db.sql.SqlUtil]  →  SqlUtil.buildLikeValue($expr$, $arg$)


## PropsUtil

.get : get
	java.lang.String [cn.hutool.setting.dialect.PropsUtil]  →  PropsUtil.get($expr$)

.getFirstFound : getFirstFound
	scala.Array [cn.hutool.setting.dialect.PropsUtil]  →  PropsUtil.getFirstFound($expr$)


## SecureUtil

.readJKSKeyStore : readJKSKeyStore
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readJKSKeyStore($expr$, $arg$)

.sha1 : sha1
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha1($expr$)

.des : des
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.des($expr$)

.generateKeyPair : generateKeyPair
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateKeyPair($expr$, $arg$)

.createMessageDigest : createMessageDigest
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createMessageDigest($expr$)

.generateKey : generateKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateKey($expr$, $arg$)

.createCipher : createCipher
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createCipher($expr$)

.aes : aes
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.aes($expr$)

.signParamsMd5 : signParamsMd5
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsMd5($expr$, $arg$)

.createMac : createMac
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createMac($expr$)

.readKeyStore : readKeyStore
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readKeyStore($expr$, $arg$)

.addProvider : addProvider
	java.security.Provider [cn.hutool.crypto.SecureUtil]  →  SecureUtil.addProvider($expr$)

.hmac : hmac
	cn.hutool.crypto.digest.HmacAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmac($expr$, $arg$)

.generatePublicKey : generatePublicKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePublicKey($expr$, $arg$)

.rsa : rsa
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rsa($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rsa($expr$, $arg$)

.hmacMd5 : hmacMd5
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacMd5($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacMd5($expr$)

.readX509Certificate : readX509Certificate
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readX509Certificate($expr$, $arg$)

.pbkdf2 : pbkdf2
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.pbkdf2($expr$, $arg$)

.generatePBEKey : generatePBEKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePBEKey($expr$, $arg$)

.createSignature : createSignature
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.createSignature($expr$)

.decode : decode
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.decode($expr$)

.signParams : signParams
	cn.hutool.crypto.symmetric.SymmetricCrypto [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParams($expr$, $arg$)
	cn.hutool.crypto.digest.DigestAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParams($expr$, $arg$)

.sha256 : sha256
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sha256($expr$)

.desede : desede
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.desede($expr$)

.signParamsSha1 : signParamsSha1
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsSha1($expr$, $arg$)

.sign : sign
	cn.hutool.crypto.asymmetric.SignAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.sign($expr$, $arg$)

.hmacSha256 : hmacSha256
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha256($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha256($expr$)

.md5 : md5
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)
	java.io.File [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)
	java.io.InputStream [cn.hutool.crypto.SecureUtil]  →  SecureUtil.md5($expr$)

.generatePrivateKey : generatePrivateKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePrivateKey($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generatePrivateKey($expr$, $arg$)

.readCertificate : readCertificate
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.readCertificate($expr$, $arg$)

.rc4 : rc4
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.rc4($expr$)

.generateAlgorithm : generateAlgorithm
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateAlgorithm($expr$, $arg$)

.getAlgorithmAfterWith : getAlgorithmAfterWith
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.getAlgorithmAfterWith($expr$)

.signParamsSha256 : signParamsSha256
	java.util.Map [cn.hutool.crypto.SecureUtil]  →  SecureUtil.signParamsSha256($expr$, $arg$)

.generateDESKey : generateDESKey
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateDESKey($expr$, $arg$)

.getCertificate : getCertificate
	java.security.KeyStore [cn.hutool.crypto.SecureUtil]  →  SecureUtil.getCertificate($expr$, $arg$)

.generateSignature : generateSignature
	cn.hutool.crypto.asymmetric.AsymmetricAlgorithm [cn.hutool.crypto.SecureUtil]  →  SecureUtil.generateSignature($expr$, $arg$)

.hmacSha1 : hmacSha1
	scala.Array [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha1($expr$)
	java.lang.String [cn.hutool.crypto.SecureUtil]  →  SecureUtil.hmacSha1($expr$)


## PinyinUtil

.getFirstLetter : getFirstLetter
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getFirstLetter($expr$, $arg$)
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getFirstLetter($expr$)

.getPinyin : getPinyin
	java.lang.String [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getPinyin($expr$, $arg$)
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.getPinyin($expr$)

.isChinese : isChinese
	CHAR [cn.hutool.extra.pinyin.PinyinUtil]  →  PinyinUtil.isChinese($expr$)


## CronUtil

.setCronSetting : setCronSetting
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.setCronSetting($expr$)
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  CronUtil.setCronSetting($expr$)

.setMatchSecond : setMatchSecond
	BOOLEAN [cn.hutool.cron.CronUtil]  →  CronUtil.setMatchSecond($expr$)

.remove : remove
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.remove($expr$)

.schedule : schedule
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.schedule($expr$, $arg$)
	cn.hutool.setting.Setting [cn.hutool.cron.CronUtil]  →  CronUtil.schedule($expr$)

.start : start
	BOOLEAN [cn.hutool.cron.CronUtil]  →  CronUtil.start($expr$)

.updatePattern : updatePattern
	java.lang.String [cn.hutool.cron.CronUtil]  →  CronUtil.updatePattern($expr$, $arg$)


## IoUtil

.checksumCRC32 : checksumCRC32
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksumCRC32($expr$)

.toBuffered : toBuffered
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.Writer [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toBuffered($expr$, $arg$)

.read : read
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.read($expr$, $arg$)

.toPushbackStream : toPushbackStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toPushbackStream($expr$, $arg$)

.readUtf8Lines : readUtf8Lines
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8Lines($expr$, $arg$)

.readObj : readObj
	cn.hutool.core.io.ValidateObjectInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readObj($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readObj($expr$, $arg$)

.checksumValue : checksumValue
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksumValue($expr$, $arg$)

.getPushBackReader : getPushBackReader
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.getPushBackReader($expr$, $arg$)

.readHex28Upper : readHex28Upper
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex28Upper($expr$)

.getUtf8Reader : getUtf8Reader
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getUtf8Reader($expr$)

.readUtf8 : readUtf8
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readUtf8($expr$)

.readLines : readLines
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.readLines($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readLines($expr$, $arg$)

.lineIter : lineIter
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.lineIter($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.lineIter($expr$, $arg$)

.writeObjects : writeObjects
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeObjects($expr$, $arg$)

.writeUtf8 : writeUtf8
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeUtf8($expr$, $arg$)

.toStream : toStream
	java.io.ByteArrayOutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)
	scala.Array [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)
	java.lang.String [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$, $arg$)
	java.io.File [cn.hutool.core.io.IoUtil]  →  IoUtil.toStream($expr$)

.checksum : checksum
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.checksum($expr$, $arg$)

.readBytes : readBytes
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readBytes($expr$, $arg$)

.getUtf8Writer : getUtf8Writer
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getUtf8Writer($expr$)

.getWriter : getWriter
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getWriter($expr$, $arg$)

.writeObj : writeObj
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.writeObj($expr$, $arg$)

.toAvailableStream : toAvailableStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toAvailableStream($expr$)

.copy : copy
	java.nio.channels.ReadableByteChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.io.FileInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)
	java.nio.channels.FileChannel [cn.hutool.core.io.IoUtil]  →  IoUtil.copy($expr$, $arg$)

.flush : flush
	java.io.Flushable [cn.hutool.core.io.IoUtil]  →  IoUtil.flush($expr$)

.contentEquals : contentEquals
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEquals($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEquals($expr$, $arg$)

.getReader : getReader
	cn.hutool.core.io.BOMInputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$)
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$)
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.getReader($expr$, $arg$)

.readHex : readHex
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex($expr$, $arg$)

.close : close
	java.io.Closeable [cn.hutool.core.io.IoUtil]  →  IoUtil.close($expr$)
	java.lang.AutoCloseable [cn.hutool.core.io.IoUtil]  →  IoUtil.close($expr$)

.toMarkSupportStream : toMarkSupportStream
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.toMarkSupportStream($expr$)

.contentEqualsIgnoreEOL : contentEqualsIgnoreEOL
	java.io.Reader [cn.hutool.core.io.IoUtil]  →  IoUtil.contentEqualsIgnoreEOL($expr$, $arg$)

.closeIfPosible : closeIfPosible
	java.lang.Object [cn.hutool.core.io.IoUtil]  →  IoUtil.closeIfPosible($expr$)

.toUtf8Stream : toUtf8Stream
	java.lang.String [cn.hutool.core.io.IoUtil]  →  IoUtil.toUtf8Stream($expr$)

.copyByNIO : copyByNIO
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.copyByNIO($expr$, $arg$)

.readHex28Lower : readHex28Lower
	java.io.InputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.readHex28Lower($expr$)

.write : write
	java.io.OutputStream [cn.hutool.core.io.IoUtil]  →  IoUtil.write($expr$, $arg$)


## GraphicsUtil

.drawString : drawString
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawString($expr$, $arg$)

.drawImg : drawImg
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawImg($expr$, $arg$)

.getCenterY : getCenterY
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.getCenterY($expr$, $arg$)

.drawStringColourful : drawStringColourful
	java.awt.Graphics [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.drawStringColourful($expr$, $arg$)

.createGraphics : createGraphics
	java.awt.image.BufferedImage [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.createGraphics($expr$, $arg$)

.setAlpha : setAlpha
	java.awt.Graphics2D [cn.hutool.core.img.GraphicsUtil]  →  GraphicsUtil.setAlpha($expr$, $arg$)


## SpringUtil

.getBeansOfType : getBeansOfType
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getBeansOfType($expr$)

.getBeanNamesForType : getBeanNamesForType
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getBeanNamesForType($expr$)

.registerBean : registerBean
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.registerBean($expr$, $arg$)

.getProperty : getProperty
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getProperty($expr$)

.getBean : getBean
	java.lang.String [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getBean($expr$, $arg$)
	java.lang.Class [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getBean($expr$)
	cn.hutool.core.lang.TypeReference [cn.hutool.extra.spring.SpringUtil]  →  SpringUtil.getBean($expr$)


## CronPatternUtil

.nextDateAfter : nextDateAfter
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.nextDateAfter($expr$, $arg$)

.matchedDates : matchedDates
	java.lang.String [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.matchedDates($expr$, $arg$)
	cn.hutool.cron.pattern.CronPattern [cn.hutool.cron.pattern.CronPatternUtil]  →  CronPatternUtil.matchedDates($expr$, $arg$)


## UserAgentUtil

.parse : parse
	java.lang.String [cn.hutool.http.useragent.UserAgentUtil]  →  UserAgentUtil.parse($expr$)


## DiagnosticUtil

.getMessages : getMessages
	javax.tools.DiagnosticCollector [cn.hutool.core.compiler.DiagnosticUtil]  →  DiagnosticUtil.getMessages($expr$)


## StrUtil

.subSufByLength : subSufByLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subSufByLength($expr$, $arg$)

.unWrap : unWrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.unWrap($expr$, $arg$)

.removeSuffixIgnoreCase : removeSuffixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSuffixIgnoreCase($expr$, $arg$)

.equalsIgnoreCase : equalsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsIgnoreCase($expr$, $arg$)

.format : format
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.format($expr$, $arg$)

.isNullOrUndefined : isNullOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNullOrUndefined($expr$)

.isAllBlank : isAllBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllBlank($expr$)

.indexedFormat : indexedFormat
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexedFormat($expr$, $arg$)

.emptyToDefault : emptyToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyToDefault($expr$, $arg$)

.hasEmpty : hasEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.hasEmpty($expr$)

.count : count
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.count($expr$, $arg$)

.move : move
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.move($expr$, $arg$)

.replaceIgnoreCase : replaceIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replaceIgnoreCase($expr$, $arg$)

.isNumeric : isNumeric
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNumeric($expr$)

.isEmptyOrUndefined : isEmptyOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmptyOrUndefined($expr$)

.removePreAndLowerFirst : removePreAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePreAndLowerFirst($expr$, $arg$)

.removeSuffix : removeSuffix
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSuffix($expr$, $arg$)

.replace : replace
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replace($expr$, $arg$)

.removePrefix : removePrefix
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePrefix($expr$, $arg$)

.repeatAndJoin : repeatAndJoin
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeatAndJoin($expr$, $arg$)

.startWith : startWith
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWith($expr$, $arg$)

.isAllCharMatch : isAllCharMatch
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllCharMatch($expr$, $arg$)

.prependIfMissing : prependIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.prependIfMissing($expr$, $arg$)

.join : join
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.join($expr$, $arg$)

.isSurround : isSurround
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isSurround($expr$, $arg$)

.similar : similar
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.similar($expr$, $arg$)

.subSuf : subSuf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subSuf($expr$, $arg$)

.equals : equals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equals($expr$, $arg$)

.equalsCharAt : equalsCharAt
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsCharAt($expr$, $arg$)

.appendIfMissing : appendIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.appendIfMissing($expr$, $arg$)

.nullToDefault : nullToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.nullToDefault($expr$, $arg$)

.center : center
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.center($expr$, $arg$)

.lastIndexOf : lastIndexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lastIndexOf($expr$, $arg$)

.isNotBlank : isNotBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNotBlank($expr$)

.splitToArray : splitToArray
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToArray($expr$, $arg$)

.addSuffixIfNot : addSuffixIfNot
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.addSuffixIfNot($expr$, $arg$)

.compareIgnoreCase : compareIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compareIgnoreCase($expr$, $arg$)

.cut : cut
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.cut($expr$, $arg$)

.padPre : padPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.padPre($expr$, $arg$)

.indexOfIgnoreCase : indexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : containsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : isAllNotEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllNotEmpty($expr$)

.concat : concat
	BOOLEAN [cn.hutool.core.util.StrUtil]  →  StrUtil.concat($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isNotEmpty($expr$)

.lastIndexOfIgnoreCase : lastIndexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lastIndexOfIgnoreCase($expr$, $arg$)

.trimEnd : trimEnd
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimEnd($expr$)

.totalLength : totalLength
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.totalLength($expr$)

.removeSufAndLowerFirst : removeSufAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeSufAndLowerFirst($expr$, $arg$)

.builder : builder
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.builder($expr$)
	INT [cn.hutool.core.util.StrUtil]  →  StrUtil.builder($expr$)

.equalsAnyIgnoreCase : equalsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsAnyIgnoreCase($expr$, $arg$)

.subWithLength : subWithLength
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.subWithLength($expr$, $arg$)

.subAfter : subAfter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subAfter($expr$, $arg$)

.blankToDefault : blankToDefault
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.blankToDefault($expr$, $arg$)

.strip : strip
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.strip($expr$, $arg$)

.toCamelCase : toCamelCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toCamelCase($expr$)

.utf8Str : utf8Str
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.utf8Str($expr$)

.wrapAllWithPairIfMissing : wrapAllWithPairIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllWithPairIfMissing($expr$, $arg$)

.startWithIgnoreCase : startWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithIgnoreCase($expr$, $arg$)

.isEmptyIfStr : isEmptyIfStr
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmptyIfStr($expr$)

.endWithAnyIgnoreCase : endWithAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithAnyIgnoreCase($expr$, $arg$)

.addPrefixIfNot : addPrefixIfNot
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.addPrefixIfNot($expr$, $arg$)

.isBlankIfStr : isBlankIfStr
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlankIfStr($expr$)

.isBlank : isBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlank($expr$)

.containsAnyIgnoreCase : containsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsAnyIgnoreCase($expr$, $arg$)

.compareVersion : compareVersion
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compareVersion($expr$, $arg$)

.removeAllLineBreaks : removeAllLineBreaks
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAllLineBreaks($expr$)

.reverse : reverse
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.reverse($expr$)

.wrapIfMissing : wrapIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapIfMissing($expr$, $arg$)

.filter : filter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.filter($expr$, $arg$)

.getContainsStrIgnoreCase : getContainsStrIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getContainsStrIgnoreCase($expr$, $arg$)

.endWithIgnoreCase : endWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithIgnoreCase($expr$, $arg$)

.str : str
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.nio.ByteBuffer [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.str($expr$)

.ordinalIndexOf : ordinalIndexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.ordinalIndexOf($expr$, $arg$)

.bytes : bytes
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.bytes($expr$, $arg$)

.utf8Bytes : utf8Bytes
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.utf8Bytes($expr$)

.subBefore : subBefore
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBefore($expr$, $arg$)

.hasBlank : hasBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.hasBlank($expr$)

.wrap : wrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrap($expr$, $arg$)

.isLowerCase : isLowerCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isLowerCase($expr$)

.splitToLong : splitToLong
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToLong($expr$, $arg$)

.splitTrim : splitTrim
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitTrim($expr$, $arg$)

.desensitized : desensitized
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.desensitized($expr$, $arg$)

.subBetween : subBetween
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBetween($expr$, $arg$)

.upperFirst : upperFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.upperFirst($expr$)

.subByCodePoint : subByCodePoint
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subByCodePoint($expr$, $arg$)

.isCharEquals : isCharEquals
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.isCharEquals($expr$)

.isBlankOrUndefined : isBlankOrUndefined
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isBlankOrUndefined($expr$)

.trimStart : trimStart
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimStart($expr$)

.hide : hide
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.hide($expr$, $arg$)

.emptyIfNull : emptyIfNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyIfNull($expr$)

.fill : fill
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fill($expr$, $arg$)

.cleanBlank : cleanBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.cleanBlank($expr$)

.split : split
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.split($expr$, $arg$)

.byteLength : byteLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.byteLength($expr$, $arg$)

.byteBuffer : byteBuffer
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.byteBuffer($expr$, $arg$)

.subPre : subPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subPre($expr$, $arg$)

.isUpperCase : isUpperCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isUpperCase($expr$)

.genSetter : genSetter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.genSetter($expr$)

.wrapAllIfMissing : wrapAllIfMissing
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllIfMissing($expr$, $arg$)

.equalsAny : equalsAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.equalsAny($expr$, $arg$)

.fillBefore : fillBefore
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fillBefore($expr$, $arg$)

.containsOnly : containsOnly
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsOnly($expr$, $arg$)

.brief : brief
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.brief($expr$, $arg$)

.lowerFirst : lowerFirst
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.lowerFirst($expr$)

.toString : toString
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  StrUtil.toString($expr$)

.repeatByLength : repeatByLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeatByLength($expr$, $arg$)

.sub : sub
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.sub($expr$, $arg$)

.length : length
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.length($expr$)

.getContainsStr : getContainsStr
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getContainsStr($expr$, $arg$)

.containsBlank : containsBlank
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsBlank($expr$)

.startWithAny : startWithAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithAny($expr$, $arg$)

.wrapAllWithPair : wrapAllWithPair
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAllWithPair($expr$, $arg$)

.strBuilder : strBuilder
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.strBuilder($expr$)
	INT [cn.hutool.core.util.StrUtil]  →  StrUtil.strBuilder($expr$)

.isWrap : isWrap
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isWrap($expr$, $arg$)

.splitToInt : splitToInt
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.splitToInt($expr$, $arg$)

.repeat : repeat
	CHAR [cn.hutool.core.util.StrUtil]  →  StrUtil.repeat($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.repeat($expr$, $arg$)

.prependIfMissingIgnoreCase : prependIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.prependIfMissingIgnoreCase($expr$, $arg$)

.getReader : getReader
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getReader($expr$)

.nullToEmpty : nullToEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.nullToEmpty($expr$)

.isSubEquals : isSubEquals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isSubEquals($expr$, $arg$)

.trim : trim
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.trim($expr$)
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trim($expr$, $arg$)

.removeAll : removeAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAll($expr$, $arg$)

.removePrefixIgnoreCase : removePrefixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removePrefixIgnoreCase($expr$, $arg$)

.endWith : endWith
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWith($expr$, $arg$)

.endWithAny : endWithAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.endWithAny($expr$, $arg$)

.contains : contains
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.contains($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.isEmpty($expr$)

.appendIfMissingIgnoreCase : appendIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.appendIfMissingIgnoreCase($expr$, $arg$)

.fillAfter : fillAfter
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.fillAfter($expr$, $arg$)

.isAllNotBlank : isAllNotBlank
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllNotBlank($expr$)

.replaceChars : replaceChars
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.replaceChars($expr$, $arg$)

.toUnderlineCase : toUnderlineCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toUnderlineCase($expr$)

.removeAny : removeAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.removeAny($expr$, $arg$)

.indexOf : indexOf
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.indexOf($expr$, $arg$)

.upperFirstAndAddPre : upperFirstAndAddPre
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.upperFirstAndAddPre($expr$, $arg$)

.isAllEmpty : isAllEmpty
	scala.Array [cn.hutool.core.util.StrUtil]  →  StrUtil.isAllEmpty($expr$)

.maxLength : maxLength
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.maxLength($expr$, $arg$)

.emptyToNull : emptyToNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.emptyToNull($expr$)

.swapCase : swapCase
	java.lang.String [cn.hutool.core.util.StrUtil]  →  StrUtil.swapCase($expr$)

.trimToEmpty : trimToEmpty
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimToEmpty($expr$)

.subPreGbk : subPreGbk
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subPreGbk($expr$, $arg$)

.compare : compare
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.compare($expr$, $arg$)

.getGeneralField : getGeneralField
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.getGeneralField($expr$)

.genGetter : genGetter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.genGetter($expr$)

.padAfter : padAfter
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.padAfter($expr$, $arg$)

.containsAny : containsAny
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.containsAny($expr$, $arg$)

.trimToNull : trimToNull
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.trimToNull($expr$)

.startWithIgnoreEquals : startWithIgnoreEquals
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.startWithIgnoreEquals($expr$, $arg$)

.subBetweenAll : subBetweenAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.subBetweenAll($expr$, $arg$)

.wrapAll : wrapAll
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.wrapAll($expr$, $arg$)

.toSymbolCase : toSymbolCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.toSymbolCase($expr$, $arg$)

.stripIgnoreCase : stripIgnoreCase
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  StrUtil.stripIgnoreCase($expr$, $arg$)


## ManifestUtil

.getManifest : getManifest
	java.io.File [cn.hutool.core.io.ManifestUtil]  →  ManifestUtil.getManifest($expr$)


## ListUtil

.sortByProperty : sortByProperty
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sortByProperty($expr$, $arg$)

.reverseNew : reverseNew
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.reverseNew($expr$)

.toList : toList
	java.util.Iterator [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.util.Enumeration [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.lang.Iterable [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.toList($expr$)

.lastIndexOf : lastIndexOf
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.lastIndexOf($expr$, $arg$)

.toLinkedList : toLinkedList
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.toLinkedList($expr$)

.indexOfAll : indexOfAll
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.indexOfAll($expr$, $arg$)

.page : page
	INT [cn.hutool.core.collection.ListUtil]  →  ListUtil.page($expr$, $arg$)

.setOrAppend : setOrAppend
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.setOrAppend($expr$, $arg$)

.reverse : reverse
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.reverse($expr$)

.split : split
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.split($expr$, $arg$)

.unmodifiable : unmodifiable
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.unmodifiable($expr$)

.toCopyOnWriteArrayList : toCopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.ListUtil]  →  ListUtil.toCopyOnWriteArrayList($expr$)

.sub : sub
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sub($expr$, $arg$)

.sort : sort
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sort($expr$, $arg$)

.sortByPinyin : sortByPinyin
	java.util.List [cn.hutool.core.collection.ListUtil]  →  ListUtil.sortByPinyin($expr$)

.of : of
	scala.Array [cn.hutool.core.collection.ListUtil]  →  ListUtil.of($expr$)

.list : list
	BOOLEAN [cn.hutool.core.collection.ListUtil]  →  ListUtil.list($expr$, $arg$)


## ReferenceUtil

.create : create
	cn.hutool.core.util.ReferenceUtil.ReferenceType [cn.hutool.core.util.ReferenceUtil]  →  ReferenceUtil.create($expr$, $arg$)


## InternalEscapeUtil

.invert : invert
	scala.Array [cn.hutool.core.text.escape.InternalEscapeUtil]  →  InternalEscapeUtil.invert($expr$)


## BloomFilterUtil

.createBitSet : createBitSet
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  BloomFilterUtil.createBitSet($expr$, $arg$)

.createBitMap : createBitMap
	INT [cn.hutool.bloomfilter.BloomFilterUtil]  →  BloomFilterUtil.createBitMap($expr$)


## FileTypeUtil

.getType : getType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$)
	java.io.File [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$)
	java.io.InputStream [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getType($expr$, $arg$)

.putFileType : putFileType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.putFileType($expr$, $arg$)

.getTypeByPath : getTypeByPath
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.getTypeByPath($expr$)

.removeFileType : removeFileType
	java.lang.String [cn.hutool.core.io.FileTypeUtil]  →  FileTypeUtil.removeFileType($expr$)


## PageUtil

.setFirstPageNo : setFirstPageNo
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.setFirstPageNo($expr$)

.getStart : getStart
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.getStart($expr$, $arg$)

.rainbow : rainbow
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.rainbow($expr$, $arg$)

.getEnd : getEnd
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.getEnd($expr$, $arg$)

.toSegment : toSegment
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.toSegment($expr$, $arg$)

.totalPage : totalPage
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.totalPage($expr$, $arg$)

.transToStartEnd : transToStartEnd
	INT [cn.hutool.core.util.PageUtil]  →  PageUtil.transToStartEnd($expr$, $arg$)


## ResourceUtil

.getStreamSafe : getStreamSafe
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getStreamSafe($expr$)

.readStr : readStr
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readStr($expr$, $arg$)

.getUtf8Reader : getUtf8Reader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getUtf8Reader($expr$)

.getResource : getResource
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResource($expr$, $arg$)

.getResourceIter : getResourceIter
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResourceIter($expr$)

.getResourceObj : getResourceObj
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResourceObj($expr$)

.readBytes : readBytes
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readBytes($expr$)

.readUtf8Str : readUtf8Str
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.readUtf8Str($expr$)

.getReader : getReader
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getReader($expr$, $arg$)

.getStream : getStream
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getStream($expr$)

.getResources : getResources
	java.lang.String [cn.hutool.core.io.resource.ResourceUtil]  →  ResourceUtil.getResources($expr$)


## CharSequenceUtil

.subSufByLength : subSufByLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subSufByLength($expr$, $arg$)

.unWrap : unWrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.unWrap($expr$, $arg$)

.removeSuffixIgnoreCase : removeSuffixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSuffixIgnoreCase($expr$, $arg$)

.equalsIgnoreCase : equalsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsIgnoreCase($expr$, $arg$)

.format : format
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.format($expr$, $arg$)

.isNullOrUndefined : isNullOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNullOrUndefined($expr$)

.isAllBlank : isAllBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllBlank($expr$)

.indexedFormat : indexedFormat
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexedFormat($expr$, $arg$)

.emptyToDefault : emptyToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyToDefault($expr$, $arg$)

.hasEmpty : hasEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hasEmpty($expr$)

.count : count
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.count($expr$, $arg$)

.move : move
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.move($expr$, $arg$)

.replaceIgnoreCase : replaceIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replaceIgnoreCase($expr$, $arg$)

.isNumeric : isNumeric
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNumeric($expr$)

.isEmptyOrUndefined : isEmptyOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isEmptyOrUndefined($expr$)

.removePreAndLowerFirst : removePreAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePreAndLowerFirst($expr$, $arg$)

.removeSuffix : removeSuffix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSuffix($expr$, $arg$)

.replace : replace
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replace($expr$, $arg$)

.removePrefix : removePrefix
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePrefix($expr$, $arg$)

.repeatAndJoin : repeatAndJoin
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeatAndJoin($expr$, $arg$)

.startWith : startWith
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWith($expr$, $arg$)

.isAllCharMatch : isAllCharMatch
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllCharMatch($expr$, $arg$)

.prependIfMissing : prependIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.prependIfMissing($expr$, $arg$)

.join : join
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.join($expr$, $arg$)

.isSurround : isSurround
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isSurround($expr$, $arg$)

.subSuf : subSuf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subSuf($expr$, $arg$)

.equals : equals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equals($expr$, $arg$)

.equalsCharAt : equalsCharAt
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsCharAt($expr$, $arg$)

.appendIfMissing : appendIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.appendIfMissing($expr$, $arg$)

.nullToDefault : nullToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.nullToDefault($expr$, $arg$)

.center : center
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.center($expr$, $arg$)

.lastIndexOf : lastIndexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lastIndexOf($expr$, $arg$)

.isNotBlank : isNotBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNotBlank($expr$)

.splitToArray : splitToArray
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToArray($expr$, $arg$)

.addSuffixIfNot : addSuffixIfNot
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.addSuffixIfNot($expr$, $arg$)

.compareIgnoreCase : compareIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compareIgnoreCase($expr$, $arg$)

.cut : cut
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.cut($expr$, $arg$)

.padPre : padPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.padPre($expr$, $arg$)

.indexOfIgnoreCase : indexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexOfIgnoreCase($expr$, $arg$)

.containsIgnoreCase : containsIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsIgnoreCase($expr$, $arg$)

.isAllNotEmpty : isAllNotEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllNotEmpty($expr$)

.concat : concat
	BOOLEAN [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.concat($expr$, $arg$)

.isNotEmpty : isNotEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isNotEmpty($expr$)

.lastIndexOfIgnoreCase : lastIndexOfIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lastIndexOfIgnoreCase($expr$, $arg$)

.trimEnd : trimEnd
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimEnd($expr$)

.totalLength : totalLength
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.totalLength($expr$)

.removeSufAndLowerFirst : removeSufAndLowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeSufAndLowerFirst($expr$, $arg$)

.builder : builder
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.builder($expr$)

.equalsAnyIgnoreCase : equalsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsAnyIgnoreCase($expr$, $arg$)

.subWithLength : subWithLength
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subWithLength($expr$, $arg$)

.subAfter : subAfter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subAfter($expr$, $arg$)

.blankToDefault : blankToDefault
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.blankToDefault($expr$, $arg$)

.strip : strip
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.strip($expr$, $arg$)

.toCamelCase : toCamelCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toCamelCase($expr$)

.wrapAllWithPairIfMissing : wrapAllWithPairIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllWithPairIfMissing($expr$, $arg$)

.startWithIgnoreCase : startWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithIgnoreCase($expr$, $arg$)

.endWithAnyIgnoreCase : endWithAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithAnyIgnoreCase($expr$, $arg$)

.addPrefixIfNot : addPrefixIfNot
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.addPrefixIfNot($expr$, $arg$)

.isBlank : isBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isBlank($expr$)

.containsAnyIgnoreCase : containsAnyIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsAnyIgnoreCase($expr$, $arg$)

.compareVersion : compareVersion
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compareVersion($expr$, $arg$)

.removeAllLineBreaks : removeAllLineBreaks
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAllLineBreaks($expr$)

.wrapIfMissing : wrapIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapIfMissing($expr$, $arg$)

.filter : filter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.filter($expr$, $arg$)

.getContainsStrIgnoreCase : getContainsStrIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getContainsStrIgnoreCase($expr$, $arg$)

.endWithIgnoreCase : endWithIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithIgnoreCase($expr$, $arg$)

.str : str
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.str($expr$)

.ordinalIndexOf : ordinalIndexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.ordinalIndexOf($expr$, $arg$)

.bytes : bytes
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.bytes($expr$, $arg$)

.utf8Bytes : utf8Bytes
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.utf8Bytes($expr$)

.subBefore : subBefore
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBefore($expr$, $arg$)

.hasBlank : hasBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hasBlank($expr$)

.wrap : wrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrap($expr$, $arg$)

.isLowerCase : isLowerCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isLowerCase($expr$)

.splitToLong : splitToLong
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToLong($expr$, $arg$)

.splitTrim : splitTrim
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitTrim($expr$, $arg$)

.desensitized : desensitized
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.desensitized($expr$, $arg$)

.subBetween : subBetween
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBetween($expr$, $arg$)

.upperFirst : upperFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.upperFirst($expr$)

.subByCodePoint : subByCodePoint
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subByCodePoint($expr$, $arg$)

.isCharEquals : isCharEquals
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isCharEquals($expr$)

.isBlankOrUndefined : isBlankOrUndefined
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isBlankOrUndefined($expr$)

.trimStart : trimStart
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimStart($expr$)

.hide : hide
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.hide($expr$, $arg$)

.emptyIfNull : emptyIfNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyIfNull($expr$)

.cleanBlank : cleanBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.cleanBlank($expr$)

.split : split
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.split($expr$, $arg$)

.byteLength : byteLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.byteLength($expr$, $arg$)

.byteBuffer : byteBuffer
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.byteBuffer($expr$, $arg$)

.subPre : subPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subPre($expr$, $arg$)

.isUpperCase : isUpperCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isUpperCase($expr$)

.genSetter : genSetter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.genSetter($expr$)

.wrapAllIfMissing : wrapAllIfMissing
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllIfMissing($expr$, $arg$)

.equalsAny : equalsAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.equalsAny($expr$, $arg$)

.containsOnly : containsOnly
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsOnly($expr$, $arg$)

.brief : brief
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.brief($expr$, $arg$)

.lowerFirst : lowerFirst
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.lowerFirst($expr$)

.repeatByLength : repeatByLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeatByLength($expr$, $arg$)

.sub : sub
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.sub($expr$, $arg$)

.length : length
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.length($expr$)

.getContainsStr : getContainsStr
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getContainsStr($expr$, $arg$)

.containsBlank : containsBlank
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsBlank($expr$)

.startWithAny : startWithAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithAny($expr$, $arg$)

.wrapAllWithPair : wrapAllWithPair
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAllWithPair($expr$, $arg$)

.strBuilder : strBuilder
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.strBuilder($expr$)

.isWrap : isWrap
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isWrap($expr$, $arg$)

.splitToInt : splitToInt
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.splitToInt($expr$, $arg$)

.repeat : repeat
	CHAR [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeat($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.repeat($expr$, $arg$)

.prependIfMissingIgnoreCase : prependIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.prependIfMissingIgnoreCase($expr$, $arg$)

.nullToEmpty : nullToEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.nullToEmpty($expr$)

.isSubEquals : isSubEquals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isSubEquals($expr$, $arg$)

.trim : trim
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trim($expr$, $arg$)

.removeAll : removeAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAll($expr$, $arg$)

.removePrefixIgnoreCase : removePrefixIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removePrefixIgnoreCase($expr$, $arg$)

.endWith : endWith
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWith($expr$, $arg$)

.endWithAny : endWithAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.endWithAny($expr$, $arg$)

.contains : contains
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.contains($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isEmpty($expr$)

.appendIfMissingIgnoreCase : appendIfMissingIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.appendIfMissingIgnoreCase($expr$, $arg$)

.isAllNotBlank : isAllNotBlank
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllNotBlank($expr$)

.replaceChars : replaceChars
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.replaceChars($expr$, $arg$)

.toUnderlineCase : toUnderlineCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toUnderlineCase($expr$)

.removeAny : removeAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.removeAny($expr$, $arg$)

.indexOf : indexOf
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.indexOf($expr$, $arg$)

.upperFirstAndAddPre : upperFirstAndAddPre
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.upperFirstAndAddPre($expr$, $arg$)

.isAllEmpty : isAllEmpty
	scala.Array [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.isAllEmpty($expr$)

.maxLength : maxLength
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.maxLength($expr$, $arg$)

.emptyToNull : emptyToNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.emptyToNull($expr$)

.swapCase : swapCase
	java.lang.String [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.swapCase($expr$)

.trimToEmpty : trimToEmpty
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimToEmpty($expr$)

.subPreGbk : subPreGbk
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subPreGbk($expr$, $arg$)

.compare : compare
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.compare($expr$, $arg$)

.getGeneralField : getGeneralField
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.getGeneralField($expr$)

.genGetter : genGetter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.genGetter($expr$)

.padAfter : padAfter
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.padAfter($expr$, $arg$)

.containsAny : containsAny
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.containsAny($expr$, $arg$)

.trimToNull : trimToNull
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.trimToNull($expr$)

.startWithIgnoreEquals : startWithIgnoreEquals
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.startWithIgnoreEquals($expr$, $arg$)

.subBetweenAll : subBetweenAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.subBetweenAll($expr$, $arg$)

.wrapAll : wrapAll
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.wrapAll($expr$, $arg$)

.toSymbolCase : toSymbolCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.toSymbolCase($expr$, $arg$)

.stripIgnoreCase : stripIgnoreCase
	java.lang.CharSequence [cn.hutool.core.text.CharSequenceUtil]  →  CharSequenceUtil.stripIgnoreCase($expr$, $arg$)


## EmojiUtil

.containsEmoji : containsEmoji
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.containsEmoji($expr$)

.getByTag : getByTag
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.getByTag($expr$)

.removeAllEmojis : removeAllEmojis
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.removeAllEmojis($expr$)

.toAlias : toAlias
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toAlias($expr$, $arg$)

.isEmoji : isEmoji
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.isEmoji($expr$)

.toUnicode : toUnicode
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toUnicode($expr$)

.extractEmojis : extractEmojis
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.extractEmojis($expr$)

.get : get
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.get($expr$)

.toHtml : toHtml
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toHtml($expr$)

.toHtmlHex : toHtmlHex
	java.lang.String [cn.hutool.extra.emoji.EmojiUtil]  →  EmojiUtil.toHtmlHex($expr$)


## ExpressionUtil

.eval : eval
	java.lang.String [cn.hutool.extra.expression.ExpressionUtil]  →  ExpressionUtil.eval($expr$, $arg$)


## TypeUtil

.toParameterizedType : toParameterizedType
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.toParameterizedType($expr$)

.getFirstParamType : getFirstParamType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFirstParamType($expr$)

.getActualType : getActualType
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getActualType($expr$, $arg$)

.getParamClasses : getParamClasses
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamClasses($expr$)

.hasTypeVariable : hasTypeVariable
	scala.Array [cn.hutool.core.util.TypeUtil]  →  TypeUtil.hasTypeVariable($expr$)

.getFieldType : getFieldType
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFieldType($expr$, $arg$)

.getParamType : getParamType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamType($expr$, $arg$)

.getTypeArgument : getTypeArgument
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeArgument($expr$, $arg$)

.getFirstParamClass : getFirstParamClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getFirstParamClass($expr$)

.isUnknown : isUnknown
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.isUnknown($expr$)

.getReturnClass : getReturnClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getReturnClass($expr$)

.getType : getType
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getType($expr$)

.getActualTypes : getActualTypes
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getActualTypes($expr$, $arg$)

.getClass : getClass
	java.lang.reflect.Field [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getClass($expr$)
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getClass($expr$)

.getParamTypes : getParamTypes
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamTypes($expr$)

.getTypeArguments : getTypeArguments
	java.lang.reflect.Type [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeArguments($expr$)

.getParamClass : getParamClass
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getParamClass($expr$, $arg$)

.getReturnType : getReturnType
	java.lang.reflect.Method [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getReturnType($expr$)

.getTypeMap : getTypeMap
	java.lang.Class [cn.hutool.core.util.TypeUtil]  →  TypeUtil.getTypeMap($expr$)


## TemplateUtil

.createEngine : createEngine
	cn.hutool.extra.template.TemplateConfig [cn.hutool.extra.template.TemplateUtil]  →  TemplateUtil.createEngine($expr$)


## CreditCodeUtil

.isCreditCodeSimple : isCreditCodeSimple
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  CreditCodeUtil.isCreditCodeSimple($expr$)

.isCreditCode : isCreditCode
	java.lang.CharSequence [cn.hutool.core.util.CreditCodeUtil]  →  CreditCodeUtil.isCreditCode($expr$)


## ExcelDateUtil

.isDateFormat : isDateFormat
	org.apache.poi.ss.usermodel.Cell [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$, $arg$)
	org.apache.poi.ss.usermodel.ExcelNumberFormat [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$)
	INT [cn.hutool.poi.excel.ExcelDateUtil]  →  ExcelDateUtil.isDateFormat($expr$, $arg$)


## WordUtil

.getWriter : getWriter
	java.io.File [cn.hutool.poi.word.WordUtil]  →  WordUtil.getWriter($expr$)


## InternUtil

.createStringInterner : createStringInterner
	BOOLEAN [cn.hutool.core.lang.intern.InternUtil]  →  InternUtil.createStringInterner($expr$)


## JWTSignerUtil

.es256 : es256
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es256($expr$)

.es512 : es512
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es512($expr$)

.rs256 : rs256
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs256($expr$)

.hs384 : hs384
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs384($expr$)

.createSigner : createSigner
	java.lang.String [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.createSigner($expr$, $arg$)

.rs384 : rs384
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs384($expr$)

.es384 : es384
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.es384($expr$)

.rs512 : rs512
	java.security.Key [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.rs512($expr$)

.hs256 : hs256
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs256($expr$)

.hs512 : hs512
	scala.Array [cn.hutool.jwt.signers.JWTSignerUtil]  →  JWTSignerUtil.hs512($expr$)


## ObjectUtil

.cloneByStream : cloneByStream
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.cloneByStream($expr$)

.hasEmpty : hasEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.hasEmpty($expr$)

.isValidIfNumber : isValidIfNumber
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isValidIfNumber($expr$)

.isBasicType : isBasicType
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isBasicType($expr$)

.equals : equals
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.equals($expr$, $arg$)

.isNull : isNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNull($expr$)

.hasNull : hasNull
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.hasNull($expr$)

.getTypeArgument : getTypeArgument
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.getTypeArgument($expr$, $arg$)

.defaultIfEmpty : defaultIfEmpty
	java.lang.String [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfEmpty($expr$, $arg$)
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfEmpty($expr$, $arg$)

.isAllNotEmpty : isAllNotEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isAllNotEmpty($expr$)

.isNotEmpty : isNotEmpty
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNotEmpty($expr$)

.deserialize : deserialize
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.deserialize($expr$)

.defaultIfNull : defaultIfNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfNull($expr$, $arg$)

.equal : equal
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.equal($expr$, $arg$)

.clone : clone
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.clone($expr$)

.defaultIfBlank : defaultIfBlank
	java.lang.CharSequence [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.defaultIfBlank($expr$, $arg$)

.emptyCount : emptyCount
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.emptyCount($expr$)

.toString : toString
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.toString($expr$)

.length : length
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.length($expr$)

.cloneIfPossible : cloneIfPossible
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.cloneIfPossible($expr$)

.isNotNull : isNotNull
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isNotNull($expr$)

.notEqual : notEqual
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.notEqual($expr$, $arg$)

.contains : contains
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.contains($expr$, $arg$)

.isEmpty : isEmpty
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isEmpty($expr$)

.serialize : serialize
	java.lang.Object [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.serialize($expr$)

.isAllEmpty : isAllEmpty
	scala.Array [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.isAllEmpty($expr$)

.compare : compare
	java.lang.Comparable [cn.hutool.core.util.ObjectUtil]  →  ObjectUtil.compare($expr$, $arg$)


## CharsetUtil

.convert : convert
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.convert($expr$, $arg$)
	java.io.File [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.convert($expr$, $arg$)

.charset : charset
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.charset($expr$)

.parse : parse
	java.lang.String [cn.hutool.core.util.CharsetUtil]  →  CharsetUtil.parse($expr$, $arg$)


## QrCodeUtil

.encode : encode
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.encode($expr$, $arg$)

.generate : generate
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generate($expr$, $arg$)

.toImage : toImage
	com.google.zxing.common.BitMatrix [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.toImage($expr$, $arg$)

.decode : decode
	java.awt.Image [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$, $arg$)
	java.io.File [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$)
	java.io.InputStream [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.decode($expr$)

.generateAsBase64 : generateAsBase64
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generateAsBase64($expr$, $arg$)

.generatePng : generatePng
	java.lang.String [cn.hutool.extra.qrcode.QrCodeUtil]  →  QrCodeUtil.generatePng($expr$, $arg$)


## EnumUtil

.equalsIgnoreCase : equalsIgnoreCase
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.equalsIgnoreCase($expr$, $arg$)

.fromString : fromString
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.fromString($expr$, $arg$)

.equals : equals
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.equals($expr$, $arg$)

.getEnumAt : getEnumAt
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getEnumAt($expr$, $arg$)

.isEnum : isEnum
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.isEnum($expr$)
	java.lang.Object [cn.hutool.core.util.EnumUtil]  →  EnumUtil.isEnum($expr$)

.getEnumMap : getEnumMap
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getEnumMap($expr$)

.notContains : notContains
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.notContains($expr$, $arg$)

.toString : toString
	java.lang.Enum [cn.hutool.core.util.EnumUtil]  →  EnumUtil.toString($expr$)

.fromStringQuietly : fromStringQuietly
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.fromStringQuietly($expr$, $arg$)

.getFieldValues : getFieldValues
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getFieldValues($expr$, $arg$)

.getNames : getNames
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getNames($expr$)

.contains : contains
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.contains($expr$, $arg$)

.getFieldNames : getFieldNames
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getFieldNames($expr$)

.likeValueOf : likeValueOf
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.likeValueOf($expr$, $arg$)

.getNameFieldMap : getNameFieldMap
	java.lang.Class [cn.hutool.core.util.EnumUtil]  →  EnumUtil.getNameFieldMap($expr$, $arg$)


## SmUtil

.changeC1C2C3ToC1C3C2 : changeC1C2C3ToC1C3C2
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.changeC1C2C3ToC1C3C2($expr$, $arg$)

.changeC1C3C2ToC1C2C3 : changeC1C3C2ToC1C2C3
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.changeC1C3C2ToC1C2C3($expr$, $arg$)

.sm2 : sm2
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	org.bouncycastle.crypto.params.ECPrivateKeyParameters [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.SmUtil]  →  SmUtil.sm2($expr$, $arg$)

.sm3 : sm3
	java.lang.String [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)
	java.io.File [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)
	java.io.InputStream [cn.hutool.crypto.SmUtil]  →  SmUtil.sm3($expr$)

.rsPlainToAsn1 : rsPlainToAsn1
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.rsPlainToAsn1($expr$)

.rsAsn1ToPlain : rsAsn1ToPlain
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.rsAsn1ToPlain($expr$)

.createHmacSm3Engine : createHmacSm3Engine
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.createHmacSm3Engine($expr$)

.sm4 : sm4
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.sm4($expr$)

.hmacSm3 : hmacSm3
	scala.Array [cn.hutool.crypto.SmUtil]  →  SmUtil.hmacSm3($expr$)


## HtmlUtil

.removeAllHtmlAttr : removeAllHtmlAttr
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeAllHtmlAttr($expr$, $arg$)

.filter : filter
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.filter($expr$)

.escape : escape
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.escape($expr$)

.removeHtmlAttr : removeHtmlAttr
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeHtmlAttr($expr$, $arg$)

.unwrapHtmlTag : unwrapHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.unwrapHtmlTag($expr$, $arg$)

.cleanHtmlTag : cleanHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.cleanHtmlTag($expr$)

.unescape : unescape
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.unescape($expr$)

.removeHtmlTag : removeHtmlTag
	java.lang.String [cn.hutool.http.HtmlUtil]  →  HtmlUtil.removeHtmlTag($expr$, $arg$)


## SSLUtil

.createSSLContext : createSSLContext
	java.lang.String [cn.hutool.core.net.SSLUtil]  →  SSLUtil.createSSLContext($expr$, $arg$)


## MathUtil

.arrangementCount : arrangementCount
	INT [cn.hutool.core.math.MathUtil]  →  MathUtil.arrangementCount($expr$, $arg$)

.combinationSelect : combinationSelect
	scala.Array [cn.hutool.core.math.MathUtil]  →  MathUtil.combinationSelect($expr$, $arg$)

.combinationCount : combinationCount
	INT [cn.hutool.core.math.MathUtil]  →  MathUtil.combinationCount($expr$, $arg$)

.arrangementSelect : arrangementSelect
	scala.Array [cn.hutool.core.math.MathUtil]  →  MathUtil.arrangementSelect($expr$, $arg$)


## DesensitizedUtil

.email : email
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.email($expr$)

.idCardNum : idCardNum
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.idCardNum($expr$, $arg$)

.mobilePhone : mobilePhone
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.mobilePhone($expr$)

.desensitized : desensitized
	java.lang.CharSequence [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.desensitized($expr$, $arg$)

.carLicense : carLicense
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.carLicense($expr$)

.address : address
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.address($expr$, $arg$)

.chineseName : chineseName
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.chineseName($expr$)

.bankCard : bankCard
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.bankCard($expr$)

.fixedPhone : fixedPhone
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.fixedPhone($expr$)

.password : password
	java.lang.String [cn.hutool.core.util.DesensitizedUtil]  →  DesensitizedUtil.password($expr$)


## FontUtil

.getDimension : getDimension
	java.awt.FontMetrics [cn.hutool.core.img.FontUtil]  →  FontUtil.getDimension($expr$, $arg$)

.createFont : createFont
	java.lang.String [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$, $arg$)
	java.io.File [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$)
	java.io.InputStream [cn.hutool.core.img.FontUtil]  →  FontUtil.createFont($expr$)

.createSansSerifFont : createSansSerifFont
	INT [cn.hutool.core.img.FontUtil]  →  FontUtil.createSansSerifFont($expr$)


## NumberUtil

.decimalFormatMoney : decimalFormatMoney
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.decimalFormatMoney($expr$)

.divisor : divisor
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.divisor($expr$, $arg$)

.count : count
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.count($expr$, $arg$)

.factorial : factorial
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.factorial($expr$, $arg$)
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  NumberUtil.factorial($expr$, $arg$)

.isGreater : isGreater
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isGreater($expr$, $arg$)

.isValid : isValid
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValid($expr$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValid($expr$)

.equals : equals
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	CHAR [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.equals($expr$, $arg$)

.isDouble : isDouble
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isDouble($expr$)

.generateRandomNumber : generateRandomNumber
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.generateRandomNumber($expr$, $arg$)

.div : div
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.div($expr$, $arg$)

.isGreaterOrEqual : isGreaterOrEqual
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isGreaterOrEqual($expr$, $arg$)

.toStr : toStr
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toStr($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toStr($expr$, $arg$)

.isInteger : isInteger
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isInteger($expr$)

.roundStr : roundStr
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundStr($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundStr($expr$, $arg$)

.pow : pow
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.pow($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.pow($expr$, $arg$)

.binaryToInt : binaryToInt
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.binaryToInt($expr$)

.binaryToLong : binaryToLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.binaryToLong($expr$)

.sqrt : sqrt
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sqrt($expr$)

.generateBySet : generateBySet
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.generateBySet($expr$, $arg$)

.toInt : toInt
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toInt($expr$)

.toBigDecimal : toBigDecimal
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigDecimal($expr$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigDecimal($expr$)

.range : range
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.range($expr$, $arg$)

.mul : mul
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.mul($expr$, $arg$)

.toBytes : toBytes
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBytes($expr$)

.partValue : partValue
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.partValue($expr$, $arg$)

.parseFloat : parseFloat
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseFloat($expr$)

.formatPercent : formatPercent
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.formatPercent($expr$, $arg$)

.decimalFormat : decimalFormat
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.decimalFormat($expr$, $arg$)

.parseDouble : parseDouble
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseDouble($expr$)

.isNumber : isNumber
	java.lang.CharSequence [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isNumber($expr$)

.isPowerOfTwo : isPowerOfTwo
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isPowerOfTwo($expr$)

.getBinaryStr : getBinaryStr
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.getBinaryStr($expr$)

.null2Zero : null2Zero
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.null2Zero($expr$)

.toUnsignedByteArray : toUnsignedByteArray
	java.math.BigInteger [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toUnsignedByteArray($expr$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toUnsignedByteArray($expr$, $arg$)

.isLessOrEqual : isLessOrEqual
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLessOrEqual($expr$, $arg$)

.sub : sub
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.sub($expr$, $arg$)

.round : round
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.round($expr$, $arg$)

.roundDown : roundDown
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundDown($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundDown($expr$, $arg$)

.newBigInteger : newBigInteger
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.newBigInteger($expr$)

.multiple : multiple
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.multiple($expr$, $arg$)

.isPrimes : isPrimes
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isPrimes($expr$)

.processMultiple : processMultiple
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.processMultiple($expr$, $arg$)

.parseInt : parseInt
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseInt($expr$)

.parseLong : parseLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseLong($expr$)

.zero2One : zero2One
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.zero2One($expr$)

.appendRange : appendRange
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.appendRange($expr$, $arg$)

.ceilDiv : ceilDiv
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.ceilDiv($expr$, $arg$)

.add : add
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$)
	java.lang.Double [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	FLOAT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.add($expr$, $arg$)

.isLess : isLess
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLess($expr$, $arg$)

.isBeside : isBeside
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isBeside($expr$, $arg$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isBeside($expr$, $arg$)

.isLong : isLong
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isLong($expr$)

.parseNumber : parseNumber
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.parseNumber($expr$)

.fromUnsignedByteArray : fromUnsignedByteArray
	scala.Array [cn.hutool.core.util.NumberUtil]  →  NumberUtil.fromUnsignedByteArray($expr$, $arg$)

.isValidNumber : isValidNumber
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.isValidNumber($expr$)

.compare : compare
	SHORT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	CHAR [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	DOUBLE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	INT [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	BYTE [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)
	LONG [cn.hutool.core.util.NumberUtil]  →  NumberUtil.compare($expr$, $arg$)

.roundHalfEven : roundHalfEven
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundHalfEven($expr$, $arg$)
	java.math.BigDecimal [cn.hutool.core.util.NumberUtil]  →  NumberUtil.roundHalfEven($expr$, $arg$)

.toBigInteger : toBigInteger
	java.lang.Number [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigInteger($expr$)
	java.lang.String [cn.hutool.core.util.NumberUtil]  →  NumberUtil.toBigInteger($expr$)


## ExcelUtil

.colNameToIndex : colNameToIndex
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.colNameToIndex($expr$)

.getBigWriter : getBigWriter
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$, $arg$)
	INT [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getBigWriter($expr$, $arg$)

.readBySax : readBySax
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.readBySax($expr$, $arg$)

.getWriterWithSheet : getWriterWithSheet
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriterWithSheet($expr$)

.getWriter : getWriter
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$, $arg$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$, $arg$)
	BOOLEAN [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getWriter($expr$)

.indexToColName : indexToColName
	INT [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.indexToColName($expr$)

.toLocation : toLocation
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.toLocation($expr$)

.getReader : getReader
	java.lang.String [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)
	java.io.File [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)
	java.io.InputStream [cn.hutool.poi.excel.ExcelUtil]  →  ExcelUtil.getReader($expr$, $arg$)


## ValidationUtil

.warpValidate : warpValidate
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.warpValidate($expr$, $arg$)

.warpValidateProperty : warpValidateProperty
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.warpValidateProperty($expr$, $arg$)

.validateProperty : validateProperty
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.validateProperty($expr$, $arg$)

.validate : validate
	java.lang.Object [cn.hutool.extra.validation.ValidationUtil]  →  ValidationUtil.validate($expr$, $arg$)


## ExcelPicUtil

.getPicMap : getPicMap
	org.apache.poi.ss.usermodel.Workbook [cn.hutool.poi.excel.ExcelPicUtil]  →  ExcelPicUtil.getPicMap($expr$, $arg$)


## PathUtil

.del : del
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.del($expr$)

.subPath : subPath
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.subPath($expr$, $arg$)

.isDirEmpty : isDirEmpty
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isDirEmpty($expr$)

.move : move
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.move($expr$, $arg$)

.equals : equals
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.equals($expr$, $arg$)

.getPathEle : getPathEle
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getPathEle($expr$, $arg$)

.isSymlink : isSymlink
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isSymlink($expr$)

.mkdir : mkdir
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.mkdir($expr$)

.walkFiles : walkFiles
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.walkFiles($expr$, $arg$)

.isDirectory : isDirectory
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isDirectory($expr$, $arg$)

.getUtf8Reader : getUtf8Reader
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getUtf8Reader($expr$)

.rename : rename
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.rename($expr$, $arg$)

.mkParentDirs : mkParentDirs
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.mkParentDirs($expr$)

.copyContent : copyContent
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copyContent($expr$, $arg$)

.getInputStream : getInputStream
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getInputStream($expr$)

.getLastPathEle : getLastPathEle
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getLastPathEle($expr$)

.copyFile : copyFile
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copyFile($expr$, $arg$)

.getAttributes : getAttributes
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getAttributes($expr$, $arg$)

.isFile : isFile
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isFile($expr$, $arg$)

.readBytes : readBytes
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.readBytes($expr$)

.exists : exists
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.exists($expr$, $arg$)

.loopFiles : loopFiles
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.loopFiles($expr$, $arg$)

.copy : copy
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.copy($expr$, $arg$)

.getReader : getReader
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getReader($expr$, $arg$)

.isSub : isSub
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.isSub($expr$, $arg$)

.toAbsNormal : toAbsNormal
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.toAbsNormal($expr$)

.getOutputStream : getOutputStream
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getOutputStream($expr$)

.getMimeType : getMimeType
	java.nio.file.Path [cn.hutool.core.io.file.PathUtil]  →  PathUtil.getMimeType($expr$)


## XmlUtil

.format : format
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.format($expr$)
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.format($expr$)

.getElement : getElement
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElement($expr$, $arg$)

.xmlToMap : xmlToMap
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToMap($expr$, $arg$)
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToMap($expr$, $arg$)

.getElements : getElements
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElements($expr$, $arg$)

.appendChild : appendChild
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.appendChild($expr$, $arg$)

.writeObjectAsXml : writeObjectAsXml
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.writeObjectAsXml($expr$, $arg$)

.readObjectFromXml : readObjectFromXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readObjectFromXml($expr$)

.parseXml : parseXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.parseXml($expr$)

.getRootElement : getRootElement
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getRootElement($expr$)

.getElementByXPath : getElementByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getElementByXPath($expr$, $arg$)

.appendText : appendText
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.appendText($expr$, $arg$)

.elementText : elementText
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.elementText($expr$, $arg$)

.getOwnerDocument : getOwnerDocument
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getOwnerDocument($expr$)

.toStr : toStr
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toStr($expr$, $arg$)
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toStr($expr$, $arg$)

.readBySax : readBySax
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readBySax($expr$, $arg$)

.readXML : readXML
	java.io.File [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.io.InputStream [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.io.Reader [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	org.xml.sax.InputSource [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.readXML($expr$)

.getNodeByXPath : getNodeByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getNodeByXPath($expr$, $arg$)

.mapToXmlStr : mapToXmlStr
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  XmlUtil.mapToXmlStr($expr$, $arg$)

.escape : escape
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.escape($expr$)

.mapToXml : mapToXml
	java.util.Map [cn.hutool.core.util.XmlUtil]  →  XmlUtil.mapToXml($expr$, $arg$)

.beanToXml : beanToXml
	java.lang.Object [cn.hutool.core.util.XmlUtil]  →  XmlUtil.beanToXml($expr$, $arg$)

.setNamespaceAware : setNamespaceAware
	BOOLEAN [cn.hutool.core.util.XmlUtil]  →  XmlUtil.setNamespaceAware($expr$)

.transform : transform
	javax.xml.transform.Source [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transform($expr$, $arg$)

.getNodeListByXPath : getNodeListByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getNodeListByXPath($expr$, $arg$)

.isElement : isElement
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.isElement($expr$)

.unescape : unescape
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.unescape($expr$)

.cleanComment : cleanComment
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.cleanComment($expr$)

.cleanInvalid : cleanInvalid
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.cleanInvalid($expr$)

.xmlToBean : xmlToBean
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.xmlToBean($expr$, $arg$)

.write : write
	org.w3c.dom.Node [cn.hutool.core.util.XmlUtil]  →  XmlUtil.write($expr$, $arg$)

.getByXPath : getByXPath
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.getByXPath($expr$, $arg$)

.toFile : toFile
	org.w3c.dom.Document [cn.hutool.core.util.XmlUtil]  →  XmlUtil.toFile($expr$, $arg$)

.transElements : transElements
	org.w3c.dom.NodeList [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transElements($expr$)
	org.w3c.dom.Element [cn.hutool.core.util.XmlUtil]  →  XmlUtil.transElements($expr$, $arg$)

.createXml : createXml
	java.lang.String [cn.hutool.core.util.XmlUtil]  →  XmlUtil.createXml($expr$, $arg$)


## CalendarUtil

.parseByPatterns : parseByPatterns
	java.lang.String [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.parseByPatterns($expr$, $arg$)

.endOfQuarter : endOfQuarter
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfQuarter($expr$)

.beginOfSecond : beginOfSecond
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfSecond($expr$)

.endOfDay : endOfDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfDay($expr$)

.isPM : isPM
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isPM($expr$)

.getEndValue : getEndValue
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.getEndValue($expr$, $arg$)

.beginOfHour : beginOfHour
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfHour($expr$)

.isAM : isAM
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isAM($expr$)

.beginOfMonth : beginOfMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfMonth($expr$)

.truncate : truncate
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.truncate($expr$, $arg$)

.ceiling : ceiling
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.ceiling($expr$, $arg$)

.endOfMinute : endOfMinute
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfMinute($expr$)

.getBeginValue : getBeginValue
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.getBeginValue($expr$, $arg$)

.age : age
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.age($expr$, $arg$)

.endOfSecond : endOfSecond
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfSecond($expr$)

.isSameMonth : isSameMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameMonth($expr$, $arg$)

.calendar : calendar
	LONG [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.calendar($expr$)
	java.util.Date [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.calendar($expr$)

.toLocalDateTime : toLocalDateTime
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.toLocalDateTime($expr$)

.beginOfYear : beginOfYear
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfYear($expr$)

.beginOfQuarter : beginOfQuarter
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfQuarter($expr$)

.beginOfDay : beginOfDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfDay($expr$)

.isSameDay : isSameDay
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameDay($expr$, $arg$)

.beginOfMinute : beginOfMinute
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfMinute($expr$)

.formatChineseDate : formatChineseDate
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.formatChineseDate($expr$, $arg$)

.yearAndQuarter : yearAndQuarter
	LONG [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.yearAndQuarter($expr$, $arg$)
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.yearAndQuarter($expr$)

.round : round
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.round($expr$, $arg$)

.endOfWeek : endOfWeek
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfWeek($expr$, $arg$)

.endOfHour : endOfHour
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfHour($expr$)

.toInstant : toInstant
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.toInstant($expr$)

.endOfYear : endOfYear
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfYear($expr$)

.endOfMonth : endOfMonth
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.endOfMonth($expr$)

.isSameInstant : isSameInstant
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.isSameInstant($expr$, $arg$)

.compare : compare
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.compare($expr$, $arg$)

.beginOfWeek : beginOfWeek
	java.util.Calendar [cn.hutool.core.date.CalendarUtil]  →  CalendarUtil.beginOfWeek($expr$, $arg$)


## AnnotationUtil

.getTargetType : getTargetType
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getTargetType($expr$)

.getAnnotations : getAnnotations
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotations($expr$, $arg$)

.isDocumented : isDocumented
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.isDocumented($expr$)

.setValue : setValue
	java.lang.annotation.Annotation [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.setValue($expr$, $arg$)

.getAnnotationValue : getAnnotationValue
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotationValue($expr$, $arg$)

.toCombination : toCombination
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.toCombination($expr$)

.isInherited : isInherited
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.isInherited($expr$)

.getRetentionPolicy : getRetentionPolicy
	java.lang.Class [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getRetentionPolicy($expr$)

.getAnnotation : getAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotation($expr$, $arg$)

.hasAnnotation : hasAnnotation
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.hasAnnotation($expr$, $arg$)

.getAnnotationValueMap : getAnnotationValueMap
	java.lang.reflect.AnnotatedElement [cn.hutool.core.annotation.AnnotationUtil]  →  AnnotationUtil.getAnnotationValueMap($expr$, $arg$)


## ScriptUtil

.createScript : createScript
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.createScript($expr$)

.compile : compile
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.compile($expr$)
	javax.script.ScriptEngine [cn.hutool.script.ScriptUtil]  →  ScriptUtil.compile($expr$, $arg$)

.eval : eval
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.eval($expr$, $arg$)

.invoke : invoke
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.invoke($expr$, $arg$)

.evalInvocable : evalInvocable
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.evalInvocable($expr$)

.getScript : getScript
	java.lang.String [cn.hutool.script.ScriptUtil]  →  ScriptUtil.getScript($expr$)


## CompilerUtil

.getTask : getTask
	javax.tools.JavaFileManager [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getTask($expr$, $arg$)

.getCompiler : getCompiler
	java.lang.ClassLoader [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getCompiler($expr$)

.getFileManager : getFileManager
	javax.tools.DiagnosticListener [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.getFileManager($expr$)

.compile : compile
	scala.Array [cn.hutool.core.compiler.CompilerUtil]  →  CompilerUtil.compile($expr$)


## KeyUtil

.readJKSKeyStore : readJKSKeyStore
	java.io.File [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readJKSKeyStore($expr$, $arg$)
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readJKSKeyStore($expr$, $arg$)

.getKeyGenerator : getKeyGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyGenerator($expr$)

.generateKeyPair : generateKeyPair
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateKeyPair($expr$, $arg$)

.generateKey : generateKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateKey($expr$, $arg$)

.getKeyPair : getKeyPair
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPair($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPair($expr$, $arg$)

.decodeECPoint : decodeECPoint
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.decodeECPoint($expr$, $arg$)
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.decodeECPoint($expr$, $arg$)

.getMainAlgorithm : getMainAlgorithm
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getMainAlgorithm($expr$)

.readKeyStore : readKeyStore
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readKeyStore($expr$, $arg$)

.generatePublicKey : generatePublicKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePublicKey($expr$, $arg$)

.readX509Certificate : readX509Certificate
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readX509Certificate($expr$, $arg$)

.generatePBEKey : generatePBEKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePBEKey($expr$, $arg$)

.readPublicKeyFromCert : readPublicKeyFromCert
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPublicKeyFromCert($expr$)

.getRSAPublicKey : getRSAPublicKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$, $arg$)
	java.math.BigInteger [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$, $arg$)
	java.security.PrivateKey [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getRSAPublicKey($expr$)

.getKeyPairGenerator : getKeyPairGenerator
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyPairGenerator($expr$)

.generateRSAPublicKey : generateRSAPublicKey
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateRSAPublicKey($expr$)

.getSecretKeyFactory : getSecretKeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getSecretKeyFactory($expr$)

.generatePrivateKey : generatePrivateKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePrivateKey($expr$, $arg$)
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generatePrivateKey($expr$, $arg$)

.generateRSAPrivateKey : generateRSAPrivateKey
	scala.Array [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateRSAPrivateKey($expr$)

.readCertificate : readCertificate
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readCertificate($expr$, $arg$)

.encodeECPublicKey : encodeECPublicKey
	java.security.PublicKey [cn.hutool.crypto.KeyUtil]  →  KeyUtil.encodeECPublicKey($expr$)

.getAlgorithmAfterWith : getAlgorithmAfterWith
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getAlgorithmAfterWith($expr$)

.getCertificateFactory : getCertificateFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getCertificateFactory($expr$)

.readPKCS12KeyStore : readPKCS12KeyStore
	java.io.File [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPKCS12KeyStore($expr$, $arg$)
	java.io.InputStream [cn.hutool.crypto.KeyUtil]  →  KeyUtil.readPKCS12KeyStore($expr$, $arg$)

.generateDESKey : generateDESKey
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.generateDESKey($expr$, $arg$)

.getCertificate : getCertificate
	java.security.KeyStore [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getCertificate($expr$, $arg$)

.getKeyFactory : getKeyFactory
	java.lang.String [cn.hutool.crypto.KeyUtil]  →  KeyUtil.getKeyFactory($expr$)


## LockUtil

.createReadWriteLock : createReadWriteLock
	BOOLEAN [cn.hutool.core.thread.lock.LockUtil]  →  LockUtil.createReadWriteLock($expr$)

